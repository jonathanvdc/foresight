Index.PACKAGES = {"foresight" : [], "foresight.eqsat.commands" : [{"name" : "foresight.eqsat.commands.AddManyCommand", "shortDescription" : "A command that adds e-nodes to an e-graph.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddManyCommand[NodeT]) => Boolean, msg: => Any): AddManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddManyCommand[NodeT]) => Boolean): AddManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AddManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AddManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AddManyCommand[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AddManyCommand[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT], partialReification: Map[Virtual, EClassCall]): (Command[NodeT], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.AddManyCommand.simplify", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#simplify(egraph:foresight.eqsat.EGraph[NodeT],partialReification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):(foresight.eqsat.commands.Command[NodeT],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: Repr, reification: Map[Virtual, EClassCall], parallelize: ParallelMap): (Option[Repr], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.AddManyCommand.apply", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#apply[Repr<:foresight.eqsat.EGraphLike[NodeT,Repr]withforesight.eqsat.EGraph[NodeT]](egraph:Repr,reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall],parallelize:foresight.eqsat.parallel.ParallelMap):(Option[Repr],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "def"}, {"label" : "definitions", "tail" : "(): Seq[Virtual]", "member" : "foresight.eqsat.commands.AddManyCommand.definitions", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#definitions:Seq[foresight.eqsat.commands.EClassSymbol.Virtual]", "kind" : "def"}, {"label" : "uses", "tail" : "(): Seq[EClassSymbol]", "member" : "foresight.eqsat.commands.AddManyCommand.uses", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#uses:Seq[foresight.eqsat.commands.EClassSymbol]", "kind" : "def"}, {"member" : "foresight.eqsat.commands.AddManyCommand#<init>", "error" : "unsupported entity"}, {"label" : "nodes", "tail" : ": Seq[(Virtual, ENodeSymbol[NodeT])]", "member" : "foresight.eqsat.commands.AddManyCommand.nodes", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#nodes:Seq[(foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.commands.ENodeSymbol[NodeT])]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT]): Command[NodeT]", "member" : "foresight.eqsat.commands.Command.simplify", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#simplify(egraph:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.commands.Command[NodeT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/AddManyCommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/commands\/AddManyCommand.html", "kind" : "case class"}, {"name" : "foresight.eqsat.commands.Command", "object" : "foresight\/eqsat\/commands\/Command$.html", "members_object" : [{"label" : "addEquivalentTree", "tail" : "(symbol: EClassSymbol, tree: MixedTree[NodeT, EClassSymbol]): Command[NodeT]", "member" : "foresight.eqsat.commands.Command.addEquivalentTree", "link" : "foresight\/eqsat\/commands\/Command$.html#addEquivalentTree[NodeT](symbol:foresight.eqsat.commands.EClassSymbol,tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.commands.EClassSymbol]):foresight.eqsat.commands.Command[NodeT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/Command$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/Command$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/Command$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/Command$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/Command$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/Command$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/Command$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/Command$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/Command$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/Command$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/Command$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/Command$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/commands\/Command$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/Command$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/commands\/Command$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/commands\/Command$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/Command$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/Command$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/Command$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/commands\/Command.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/commands\/Command.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/commands\/Command.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Command[NodeT]) => Boolean, msg: => Any): Command[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/Command.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Command[NodeT]) => Boolean): Command[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/Command.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Command[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/Command.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Command[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/Command.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Command[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/commands\/Command.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Command[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/commands\/Command.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT]): Command[NodeT]", "member" : "foresight.eqsat.commands.Command.simplify", "link" : "foresight\/eqsat\/commands\/Command.html#simplify(egraph:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.commands.Command[NodeT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/Command.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/Command.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/Command.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/Command.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/Command.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/Command.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/Command.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/Command.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/Command.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/Command.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/Command.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/Command.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/commands\/Command.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/Command.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/commands\/Command.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/commands\/Command.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/Command.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/Command.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/Command.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT], partialReification: Map[Virtual, EClassCall]): (Command[NodeT], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.Command.simplify", "link" : "foresight\/eqsat\/commands\/Command.html#simplify(egraph:foresight.eqsat.EGraph[NodeT],partialReification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):(foresight.eqsat.commands.Command[NodeT],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(egraph: Repr, reification: Map[Virtual, EClassCall], parallelize: ParallelMap): (Option[Repr], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.Command.apply", "link" : "foresight\/eqsat\/commands\/Command.html#apply[Repr<:foresight.eqsat.EGraphLike[NodeT,Repr]withforesight.eqsat.EGraph[NodeT]](egraph:Repr,reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall],parallelize:foresight.eqsat.parallel.ParallelMap):(Option[Repr],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "abstract def"}, {"label" : "definitions", "tail" : "(): Seq[Virtual]", "member" : "foresight.eqsat.commands.Command.definitions", "link" : "foresight\/eqsat\/commands\/Command.html#definitions:Seq[foresight.eqsat.commands.EClassSymbol.Virtual]", "kind" : "abstract def"}, {"label" : "uses", "tail" : "(): Seq[EClassSymbol]", "member" : "foresight.eqsat.commands.Command.uses", "link" : "foresight\/eqsat\/commands\/Command.html#uses:Seq[foresight.eqsat.commands.EClassSymbol]", "kind" : "abstract def"}], "shortDescription" : "A command that can be applied to an e-graph."}, {"name" : "foresight.eqsat.commands.CommandQueue", "shortDescription" : "A queue of commands to be applied to an e-graph.", "object" : "foresight\/eqsat\/commands\/CommandQueue$.html", "members_object" : [{"label" : "empty", "tail" : "(): CommandQueue[NodeT]", "member" : "foresight.eqsat.commands.CommandQueue.empty", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#empty[NodeT]:foresight.eqsat.commands.CommandQueue[NodeT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/CommandQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CommandQueue[NodeT]) => Boolean, msg: => Any): CommandQueue[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CommandQueue[NodeT]) => Boolean): CommandQueue[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CommandQueue[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CommandQueue[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CommandQueue[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CommandQueue[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT], partialReification: Map[Virtual, EClassCall]): (Command[NodeT], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.CommandQueue.simplify", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#simplify(egraph:foresight.eqsat.EGraph[NodeT],partialReification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):(foresight.eqsat.commands.Command[NodeT],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "def"}, {"label" : "optimized", "tail" : "(): CommandQueue[NodeT]", "member" : "foresight.eqsat.commands.CommandQueue.optimized", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#optimized:foresight.eqsat.commands.CommandQueue[NodeT]", "kind" : "def"}, {"label" : "chain", "tail" : "(commandQueue: CommandQueue[NodeT]): CommandQueue[NodeT]", "member" : "foresight.eqsat.commands.CommandQueue.chain", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#chain(commandQueue:foresight.eqsat.commands.CommandQueue[NodeT]):foresight.eqsat.commands.CommandQueue[NodeT]", "kind" : "def"}, {"label" : "chain", "tail" : "(command: Command[NodeT]): CommandQueue[NodeT]", "member" : "foresight.eqsat.commands.CommandQueue.chain", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#chain(command:foresight.eqsat.commands.Command[NodeT]):foresight.eqsat.commands.CommandQueue[NodeT]", "kind" : "def"}, {"label" : "union", "tail" : "(left: EClassSymbol, right: EClassSymbol): CommandQueue[NodeT]", "member" : "foresight.eqsat.commands.CommandQueue.union", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#union(left:foresight.eqsat.commands.EClassSymbol,right:foresight.eqsat.commands.EClassSymbol):foresight.eqsat.commands.CommandQueue[NodeT]", "kind" : "def"}, {"label" : "add", "tail" : "(tree: MixedTree[NodeT, EClassSymbol]): (EClassSymbol, CommandQueue[NodeT])", "member" : "foresight.eqsat.commands.CommandQueue.add", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#add(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.commands.EClassSymbol]):(foresight.eqsat.commands.EClassSymbol,foresight.eqsat.commands.CommandQueue[NodeT])", "kind" : "def"}, {"label" : "add", "tail" : "(node: ENodeSymbol[NodeT]): (EClassSymbol, CommandQueue[NodeT])", "member" : "foresight.eqsat.commands.CommandQueue.add", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#add(node:foresight.eqsat.commands.ENodeSymbol[NodeT]):(foresight.eqsat.commands.EClassSymbol,foresight.eqsat.commands.CommandQueue[NodeT])", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: Repr, reification: Map[Virtual, EClassCall], parallelize: ParallelMap): (Option[Repr], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.CommandQueue.apply", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#apply[Repr<:foresight.eqsat.EGraphLike[NodeT,Repr]withforesight.eqsat.EGraph[NodeT]](egraph:Repr,reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall],parallelize:foresight.eqsat.parallel.ParallelMap):(Option[Repr],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "def"}, {"label" : "definitions", "tail" : "(): Seq[Virtual]", "member" : "foresight.eqsat.commands.CommandQueue.definitions", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#definitions:Seq[foresight.eqsat.commands.EClassSymbol.Virtual]", "kind" : "def"}, {"label" : "uses", "tail" : "(): Seq[EClassSymbol]", "member" : "foresight.eqsat.commands.CommandQueue.uses", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#uses:Seq[foresight.eqsat.commands.EClassSymbol]", "kind" : "def"}, {"member" : "foresight.eqsat.commands.CommandQueue#<init>", "error" : "unsupported entity"}, {"label" : "commands", "tail" : ": Seq[Command[NodeT]]", "member" : "foresight.eqsat.commands.CommandQueue.commands", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#commands:Seq[foresight.eqsat.commands.Command[NodeT]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT]): Command[NodeT]", "member" : "foresight.eqsat.commands.Command.simplify", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#simplify(egraph:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.commands.Command[NodeT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/CommandQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/CommandQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/commands\/CommandQueue.html", "kind" : "case class"}, {"name" : "foresight.eqsat.commands.CommandQueueBuilder", "shortDescription" : "Constructs a queue of commands that can be applied to an e-graph.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CommandQueueBuilder[NodeT]) => Boolean, msg: => Any): CommandQueueBuilder[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CommandQueueBuilder[NodeT]) => Boolean): CommandQueueBuilder[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CommandQueueBuilder[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CommandQueueBuilder[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CommandQueueBuilder[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CommandQueueBuilder[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "union", "tail" : "(a: EClassSymbol, b: EClassSymbol): Unit", "member" : "foresight.eqsat.commands.CommandQueueBuilder.union", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#union(a:foresight.eqsat.commands.EClassSymbol,b:foresight.eqsat.commands.EClassSymbol):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(tree: MixedTree[NodeT, EClassSymbol]): EClassSymbol", "member" : "foresight.eqsat.commands.CommandQueueBuilder.add", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#add(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.commands.EClassSymbol]):foresight.eqsat.commands.EClassSymbol", "kind" : "def"}, {"label" : "add", "tail" : "(node: ENodeSymbol[NodeT]): EClassSymbol", "member" : "foresight.eqsat.commands.CommandQueueBuilder.add", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#add(node:foresight.eqsat.commands.ENodeSymbol[NodeT]):foresight.eqsat.commands.EClassSymbol", "kind" : "def"}, {"label" : "queue", "tail" : "(): CommandQueue[NodeT]", "member" : "foresight.eqsat.commands.CommandQueueBuilder.queue", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#queue:foresight.eqsat.commands.CommandQueue[NodeT]", "kind" : "def"}, {"member" : "foresight.eqsat.commands.CommandQueueBuilder#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "foresight\/eqsat\/commands\/CommandQueueBuilder.html", "kind" : "class"}, {"name" : "foresight.eqsat.commands.EClassSymbol", "object" : "foresight\/eqsat\/commands\/EClassSymbol$.html", "members_object" : [{"label" : "real", "tail" : "(call: EClassCall): Real", "member" : "foresight.eqsat.commands.EClassSymbol.real", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#real(call:foresight.eqsat.EClassCall):foresight.eqsat.commands.EClassSymbol.Real", "kind" : "def"}, {"label" : "virtual", "tail" : "(): Virtual", "member" : "foresight.eqsat.commands.EClassSymbol.virtual", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#virtual():foresight.eqsat.commands.EClassSymbol.Virtual", "kind" : "def"}, {"label" : "Virtual", "tail" : "", "member" : "foresight.eqsat.commands.EClassSymbol.Virtual", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#VirtualextendsEClassSymbol", "kind" : "final class"}, {"label" : "Real", "tail" : "", "member" : "foresight.eqsat.commands.EClassSymbol.Real", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#RealextendsEClassSymbolwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/EClassSymbol$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/commands\/EClassSymbol.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EClassSymbol) => Boolean, msg: => Any): EClassSymbol", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EClassSymbol) => Boolean): EClassSymbol", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EClassSymbol", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EClassSymbol", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EClassSymbol, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EClassSymbol, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "refine", "tail" : "(reification: Map[Virtual, EClassCall]): EClassSymbol", "member" : "foresight.eqsat.commands.EClassSymbol.refine", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#refine(reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):foresight.eqsat.commands.EClassSymbol", "kind" : "final def"}, {"label" : "tryReify", "tail" : "(reification: Map[Virtual, EClassCall]): Option[EClassCall]", "member" : "foresight.eqsat.commands.EClassSymbol.tryReify", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#tryReify(reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "reify", "tail" : "(reification: Map[Virtual, EClassCall]): EClassCall", "member" : "foresight.eqsat.commands.EClassSymbol.reify", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#reify(reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "isVirtual", "tail" : "(): Boolean", "member" : "foresight.eqsat.commands.EClassSymbol.isVirtual", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#isVirtual:Boolean", "kind" : "final def"}, {"label" : "isReal", "tail" : "(): Boolean", "member" : "foresight.eqsat.commands.EClassSymbol.isReal", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#isReal:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/EClassSymbol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A symbolic e-class application."}, {"name" : "foresight.eqsat.commands.ENodeSymbol", "shortDescription" : "A symbolic e-node that may or may not yet be in the e-graph.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ENodeSymbol[NodeT]) => Boolean, msg: => Any): ENodeSymbol[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ENodeSymbol[NodeT]) => Boolean): ENodeSymbol[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ENodeSymbol[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ENodeSymbol[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ENodeSymbol[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ENodeSymbol[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "reify", "tail" : "(reification: Map[Virtual, EClassCall]): ENode[NodeT]", "member" : "foresight.eqsat.commands.ENodeSymbol.reify", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#reify(reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):foresight.eqsat.ENode[NodeT]", "kind" : "def"}, {"member" : "foresight.eqsat.commands.ENodeSymbol#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Seq[EClassSymbol]", "member" : "foresight.eqsat.commands.ENodeSymbol.args", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#args:Seq[foresight.eqsat.commands.EClassSymbol]", "kind" : "val"}, {"label" : "uses", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.commands.ENodeSymbol.uses", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#uses:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "definitions", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.commands.ENodeSymbol.definitions", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#definitions:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "nodeType", "tail" : ": NodeT", "member" : "foresight.eqsat.commands.ENodeSymbol.nodeType", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#nodeType:NodeT", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/ENodeSymbol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/commands\/ENodeSymbol.html", "kind" : "case class"}, {"name" : "foresight.eqsat.commands.UnionManyCommand", "shortDescription" : "A command that unions many e-classes in an e-graph.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (UnionManyCommand[NodeT]) => Boolean, msg: => Any): UnionManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (UnionManyCommand[NodeT]) => Boolean): UnionManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): UnionManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): UnionManyCommand[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (UnionManyCommand[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (UnionManyCommand[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT], partialReification: Map[Virtual, EClassCall]): (Command[NodeT], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.UnionManyCommand.simplify", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#simplify(egraph:foresight.eqsat.EGraph[NodeT],partialReification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall]):(foresight.eqsat.commands.Command[NodeT],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: Repr, reification: Map[Virtual, EClassCall], parallelize: ParallelMap): (Option[Repr], Map[Virtual, EClassCall])", "member" : "foresight.eqsat.commands.UnionManyCommand.apply", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#apply[Repr<:foresight.eqsat.EGraphLike[NodeT,Repr]withforesight.eqsat.EGraph[NodeT]](egraph:Repr,reification:Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall],parallelize:foresight.eqsat.parallel.ParallelMap):(Option[Repr],Map[foresight.eqsat.commands.EClassSymbol.Virtual,foresight.eqsat.EClassCall])", "kind" : "def"}, {"label" : "definitions", "tail" : "(): Seq[Virtual]", "member" : "foresight.eqsat.commands.UnionManyCommand.definitions", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#definitions:Seq[foresight.eqsat.commands.EClassSymbol.Virtual]", "kind" : "def"}, {"label" : "uses", "tail" : "(): Seq[EClassSymbol]", "member" : "foresight.eqsat.commands.UnionManyCommand.uses", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#uses:Seq[foresight.eqsat.commands.EClassSymbol]", "kind" : "def"}, {"member" : "foresight.eqsat.commands.UnionManyCommand#<init>", "error" : "unsupported entity"}, {"label" : "pairs", "tail" : ": Seq[(EClassSymbol, EClassSymbol)]", "member" : "foresight.eqsat.commands.UnionManyCommand.pairs", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#pairs:Seq[(foresight.eqsat.commands.EClassSymbol,foresight.eqsat.commands.EClassSymbol)]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "simplify", "tail" : "(egraph: EGraph[NodeT]): Command[NodeT]", "member" : "foresight.eqsat.commands.Command.simplify", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#simplify(egraph:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.commands.Command[NodeT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/commands\/UnionManyCommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/commands\/UnionManyCommand.html", "kind" : "case class"}], "foresight.eqsat.parallel" : [{"name" : "foresight.eqsat.parallel.CancellationToken", "shortDescription" : "A token that can be used to cancel an operation.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CancellationToken) => Boolean, msg: => Any): CancellationToken", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CancellationToken) => Boolean): CancellationToken", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CancellationToken", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CancellationToken", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CancellationToken, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CancellationToken, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "cancelAfter", "tail" : "(timeout: Duration): CancellationToken", "member" : "foresight.eqsat.parallel.CancellationToken.cancelAfter", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#cancelAfter(timeout:scala.concurrent.duration.Duration):foresight.eqsat.parallel.CancellationToken", "kind" : "def"}, {"label" : "isCanceled", "tail" : "(): Boolean", "member" : "foresight.eqsat.parallel.CancellationToken.isCanceled", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#isCanceled:Boolean", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "foresight.eqsat.parallel.CancellationToken.cancel", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#cancel():Unit", "kind" : "def"}, {"member" : "foresight.eqsat.parallel.CancellationToken#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/parallel\/CancellationToken.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "foresight\/eqsat\/parallel\/CancellationToken.html", "kind" : "class"}, {"name" : "foresight.eqsat.parallel.OperationCanceledException", "shortDescription" : "An exception that is thrown when an operation is cancelled.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OperationCanceledException) => Boolean, msg: => Any): OperationCanceledException", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OperationCanceledException) => Boolean): OperationCanceledException", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): OperationCanceledException", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OperationCanceledException", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OperationCanceledException, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OperationCanceledException, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "foresight.eqsat.parallel.OperationCanceledException.getMessage", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#getMessage():String", "kind" : "def"}, {"member" : "foresight.eqsat.parallel.OperationCanceledException#<init>", "error" : "unsupported entity"}, {"label" : "token", "tail" : ": CancellationToken", "member" : "foresight.eqsat.parallel.OperationCanceledException.token", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#token:foresight.eqsat.parallel.CancellationToken", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/parallel\/OperationCanceledException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/parallel\/OperationCanceledException.html", "kind" : "case class"}, {"name" : "foresight.eqsat.parallel.ParallelMap", "object" : "foresight\/eqsat\/parallel\/ParallelMap$.html", "members_object" : [{"label" : "default", "tail" : ": ParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.default", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#default:foresight.eqsat.parallel.ParallelMap", "kind" : "val"}, {"label" : "fixedThreadParallel", "tail" : "(n: Int): ParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.fixedThreadParallel", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#fixedThreadParallel(n:Int):foresight.eqsat.parallel.ParallelMap", "kind" : "def"}, {"label" : "parallel", "tail" : ": ParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.parallel", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#parallel:foresight.eqsat.parallel.ParallelMap", "kind" : "val"}, {"label" : "sequential", "tail" : ": ParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.sequential", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#sequential:foresight.eqsat.parallel.ParallelMap", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/parallel\/ParallelMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/parallel\/ParallelMap.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParallelMap) => Boolean, msg: => Any): ParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParallelMap) => Boolean): ParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ParallelMap, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ParallelMap, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "timed", "tail" : "(): TimedParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.timed", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#timed:foresight.eqsat.parallel.TimedParallelMap", "kind" : "final def"}, {"label" : "run", "tail" : "(f: => A): A", "member" : "foresight.eqsat.parallel.ParallelMap.run", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#run[A](f:=>A):A", "kind" : "def"}, {"label" : "cancelable", "tail" : "(token: CancellationToken): ParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.cancelable", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#cancelable(token:foresight.eqsat.parallel.CancellationToken):foresight.eqsat.parallel.ParallelMap", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(inputs: Iterable[A], f: (A) => B): Iterable[B]", "member" : "foresight.eqsat.parallel.ParallelMap.apply", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#apply[A,B](inputs:Iterable[A],f:A=>B):Iterable[B]", "kind" : "abstract def"}, {"label" : "child", "tail" : "(name: String): ParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.child", "link" : "foresight\/eqsat\/parallel\/ParallelMap.html#child(name:String):foresight.eqsat.parallel.ParallelMap", "kind" : "abstract def"}], "shortDescription" : "A trait that provides a method to apply a function to each element of an iterable."}, {"name" : "foresight.eqsat.parallel.TimedParallelMap", "shortDescription" : "A parallel map that measures the time taken to process elements.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimedParallelMap) => Boolean, msg: => Any): TimedParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimedParallelMap) => Boolean): TimedParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TimedParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TimedParallelMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TimedParallelMap, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TimedParallelMap, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "run", "tail" : "(f: => A): A", "member" : "foresight.eqsat.parallel.TimedParallelMap.run", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#run[A](f:=>A):A", "kind" : "def"}, {"label" : "apply", "tail" : "(inputs: Iterable[A], f: (A) => B): Iterable[B]", "member" : "foresight.eqsat.parallel.TimedParallelMap.apply", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#apply[A,B](inputs:Iterable[A],f:A=>B):Iterable[B]", "kind" : "def"}, {"label" : "child", "tail" : "(name: String): ParallelMap", "member" : "foresight.eqsat.parallel.TimedParallelMap.child", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#child(name:String):foresight.eqsat.parallel.ParallelMap", "kind" : "def"}, {"label" : "report", "tail" : "(): TimingReport", "member" : "foresight.eqsat.parallel.TimedParallelMap.report", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#report:foresight.eqsat.parallel.TimingReport", "kind" : "def"}, {"label" : "nanos", "tail" : "(): Long", "member" : "foresight.eqsat.parallel.TimedParallelMap.nanos", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#nanos:Long", "kind" : "def"}, {"label" : "children", "tail" : "(): Seq[TimedParallelMap]", "member" : "foresight.eqsat.parallel.TimedParallelMap.children", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#children:Seq[foresight.eqsat.parallel.TimedParallelMap]", "kind" : "def"}, {"member" : "foresight.eqsat.parallel.TimedParallelMap#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "foresight.eqsat.parallel.TimedParallelMap.name", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#name:String", "kind" : "val"}, {"label" : "timed", "tail" : "(): TimedParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.timed", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#timed:foresight.eqsat.parallel.TimedParallelMap", "kind" : "final def"}, {"label" : "cancelable", "tail" : "(token: CancellationToken): ParallelMap", "member" : "foresight.eqsat.parallel.ParallelMap.cancelable", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#cancelable(token:foresight.eqsat.parallel.CancellationToken):foresight.eqsat.parallel.ParallelMap", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/parallel\/TimedParallelMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "foresight\/eqsat\/parallel\/TimedParallelMap.html", "kind" : "class"}, {"name" : "foresight.eqsat.parallel.TimingReport", "shortDescription" : "A report of the time taken for a hierarchy of operations.", "object" : "foresight\/eqsat\/parallel\/TimingReport$.html", "members_object" : [{"label" : "simplify", "tail" : "(report: TimingReport): TimingReport", "member" : "foresight.eqsat.parallel.TimingReport.simplify", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#simplify(report:foresight.eqsat.parallel.TimingReport):foresight.eqsat.parallel.TimingReport", "kind" : "def"}, {"label" : "merge", "tail" : "(name: String, reports: Seq[TimingReport]): TimingReport", "member" : "foresight.eqsat.parallel.TimingReport.merge", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#merge(name:String,reports:Seq[foresight.eqsat.parallel.TimingReport]):foresight.eqsat.parallel.TimingReport", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/parallel\/TimingReport$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimingReport) => Boolean, msg: => Any): TimingReport", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TimingReport) => Boolean): TimingReport", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TimingReport", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TimingReport", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TimingReport, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TimingReport, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "foresight.eqsat.parallel.TimingReport.toString", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#toString():String", "kind" : "def"}, {"label" : "duration", "tail" : "(): Duration", "member" : "foresight.eqsat.parallel.TimingReport.duration", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#duration:scala.concurrent.duration.Duration", "kind" : "def"}, {"member" : "foresight.eqsat.parallel.TimingReport#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Seq[TimingReport]", "member" : "foresight.eqsat.parallel.TimingReport.children", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#children:Seq[foresight.eqsat.parallel.TimingReport]", "kind" : "val"}, {"label" : "nanos", "tail" : ": Long", "member" : "foresight.eqsat.parallel.TimingReport.nanos", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#nanos:Long", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "foresight.eqsat.parallel.TimingReport.name", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/parallel\/TimingReport.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/parallel\/TimingReport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/parallel\/TimingReport.html", "kind" : "case class"}], "foresight.eqsat.rewriting.patterns" : [{"name" : "foresight.eqsat.rewriting.patterns.CompiledPattern", "shortDescription" : "A compiled pattern.", "object" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html", "members_object" : [{"label" : "apply", "tail" : "(pattern: MixedTree[NodeT, Pattern[NodeT]]): CompiledPattern[NodeT, EGraphT]", "member" : "foresight.eqsat.rewriting.patterns.CompiledPattern.apply", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]](pattern:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.rewriting.patterns.Pattern[NodeT]]):foresight.eqsat.rewriting.patterns.CompiledPattern[NodeT,EGraphT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CompiledPattern[NodeT, EGraphT]) => Boolean, msg: => Any): CompiledPattern[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CompiledPattern[NodeT, EGraphT]) => Boolean): CompiledPattern[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CompiledPattern[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CompiledPattern[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CompiledPattern[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CompiledPattern[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "matches", "tail" : "(tree: MixedTree[NodeT, EClassCall], egraph: EGraphT): Boolean", "member" : "foresight.eqsat.rewriting.patterns.CompiledPattern.matches", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#matches(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall],egraph:EGraphT):Boolean", "kind" : "def"}, {"label" : "matches", "tail" : "(call: EClassCall, egraph: EGraphT): Boolean", "member" : "foresight.eqsat.rewriting.patterns.CompiledPattern.matches", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#matches(call:foresight.eqsat.EClassCall,egraph:EGraphT):Boolean", "kind" : "def"}, {"label" : "search", "tail" : "(call: EClassCall, egraph: EGraphT): Seq[PatternMatch[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.CompiledPattern.search", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#search(call:foresight.eqsat.EClassCall,egraph:EGraphT):Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]]", "kind" : "def"}, {"member" : "foresight.eqsat.rewriting.patterns.CompiledPattern#<init>", "error" : "unsupported entity"}, {"label" : "instructions", "tail" : ": List[Instruction[NodeT, EGraphT]]", "member" : "foresight.eqsat.rewriting.patterns.CompiledPattern.instructions", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#instructions:List[foresight.eqsat.rewriting.patterns.Instruction[NodeT,EGraphT]]", "kind" : "val"}, {"label" : "pattern", "tail" : ": MixedTree[NodeT, Pattern[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.CompiledPattern.pattern", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#pattern:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.rewriting.patterns.Pattern[NodeT]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/rewriting\/patterns\/CompiledPattern.html", "kind" : "case class"}, {"name" : "foresight.eqsat.rewriting.patterns.Instruction", "object" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html", "members_object" : [{"label" : "Compare", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.Instruction.Compare", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#Compare[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsInstruction[NodeT,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "BindVar", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.Instruction.BindVar", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#BindVar[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsInstruction[NodeT,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "BindNode", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.Instruction.BindNode", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#BindNode[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsInstruction[NodeT,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Instruction[NodeT, EGraphT]) => Boolean, msg: => Any): Instruction[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Instruction[NodeT, EGraphT]) => Boolean): Instruction[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Instruction[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Instruction[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Instruction[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Instruction[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "execute", "tail" : "(graph: EGraphT, machine: MachineState[NodeT]): Either[Set[MachineState[NodeT]], MachineError[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.Instruction.execute", "link" : "foresight\/eqsat\/rewriting\/patterns\/Instruction.html#execute(graph:EGraphT,machine:foresight.eqsat.rewriting.patterns.MachineState[NodeT]):Either[Set[foresight.eqsat.rewriting.patterns.MachineState[NodeT]],foresight.eqsat.rewriting.patterns.MachineError[NodeT]]", "kind" : "abstract def"}], "shortDescription" : "An instruction for the pattern-matching virtual machine."}, {"name" : "foresight.eqsat.rewriting.patterns.Machine", "shortDescription" : "A pattern-matching virtual machine.", "object" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html", "members_object" : [{"label" : "tryRun", "tail" : "(graph: GraphT, machine: MachineState[NodeT], instructions: List[Instruction[NodeT, GraphT]]): Set[MachineResult[NodeT, GraphT]]", "member" : "foresight.eqsat.rewriting.patterns.Machine.tryRun", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#tryRun[NodeT,GraphT<:foresight.eqsat.EGraphLike[NodeT,GraphT]withforesight.eqsat.EGraph[NodeT]](graph:GraphT,machine:foresight.eqsat.rewriting.patterns.MachineState[NodeT],instructions:List[foresight.eqsat.rewriting.patterns.Instruction[NodeT,GraphT]]):Set[foresight.eqsat.rewriting.patterns.MachineResult[NodeT,GraphT]]", "kind" : "def"}, {"label" : "run", "tail" : "(graph: GraphT, machine: MachineState[NodeT], instructions: List[Instruction[NodeT, GraphT]]): Set[MachineState[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.Machine.run", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#run[NodeT,GraphT<:foresight.eqsat.EGraphLike[NodeT,GraphT]withforesight.eqsat.EGraph[NodeT]](graph:GraphT,machine:foresight.eqsat.rewriting.patterns.MachineState[NodeT],instructions:List[foresight.eqsat.rewriting.patterns.Instruction[NodeT,GraphT]]):Set[foresight.eqsat.rewriting.patterns.MachineState[NodeT]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Machine$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "foresight.eqsat.rewriting.patterns.MachineError", "object" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html", "members_object" : [{"label" : "InconsistentVars", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.MachineError.InconsistentVars", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#InconsistentVars[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsMachineError[NodeT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NoMatchingNode", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.MachineError.NoMatchingNode", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#NoMatchingNode[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsMachineError[NodeT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineError[NodeT]) => Boolean, msg: => Any): MachineError[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineError[NodeT]) => Boolean): MachineError[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MachineError[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MachineError[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MachineError[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MachineError[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "An error that occurs during the execution of a pattern machine."}, {"name" : "foresight.eqsat.rewriting.patterns.MachineResult", "object" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html", "members_object" : [{"label" : "Failure", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.MachineResult.Failure", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#Failure[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsMachineResult[NodeT,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Success", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.MachineResult.Success", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#Success[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsMachineResult[NodeT,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineResult[NodeT, EGraphT]) => Boolean, msg: => Any): MachineResult[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineResult[NodeT, EGraphT]) => Boolean): MachineResult[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MachineResult[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MachineResult[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MachineResult[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MachineResult[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "The result of executing a pattern machine."}, {"name" : "foresight.eqsat.rewriting.patterns.MachineSearcherPhase", "shortDescription" : "A phase of a searcher that searches for matches of a pattern machine in an e-graph.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineSearcherPhase[NodeT, EGraphT]) => Boolean, msg: => Any): MachineSearcherPhase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineSearcherPhase[NodeT, EGraphT]) => Boolean): MachineSearcherPhase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MachineSearcherPhase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MachineSearcherPhase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MachineSearcherPhase[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MachineSearcherPhase[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "tryReverse", "tail" : "(nextPhase: Applier[NodeT, Unit, EGraphT]): Option[Applier[NodeT, PatternMatch[NodeT], EGraphT]]", "member" : "foresight.eqsat.rewriting.patterns.MachineSearcherPhase.tryReverse", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#tryReverse(nextPhase:foresight.eqsat.rewriting.Applier[NodeT,Unit,EGraphT]):Option[foresight.eqsat.rewriting.Applier[NodeT,foresight.eqsat.rewriting.patterns.PatternMatch[NodeT],EGraphT]]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(matches: Map[EClassRef, Seq[PatternMatch[NodeT]]]): Seq[PatternMatch[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.MachineSearcherPhase.aggregate", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#aggregate(matches:Map[foresight.eqsat.EClassRef,Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]]]):Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]]", "kind" : "def"}, {"label" : "search", "tail" : "(call: EClassCall, egraph: EGraphT, input: Unit): Seq[PatternMatch[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.MachineSearcherPhase.search", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#search(call:foresight.eqsat.EClassCall,egraph:EGraphT,input:Unit):Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]]", "kind" : "def"}, {"member" : "foresight.eqsat.rewriting.patterns.MachineSearcherPhase#<init>", "error" : "unsupported entity"}, {"label" : "pattern", "tail" : ": CompiledPattern[NodeT, EGraphT]", "member" : "foresight.eqsat.rewriting.patterns.MachineSearcherPhase.pattern", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#pattern:foresight.eqsat.rewriting.patterns.CompiledPattern[NodeT,EGraphT]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "search", "tail" : "(egraph: EGraphT, input: Unit, parallelize: ParallelMap): Seq[PatternMatch[NodeT]]", "member" : "foresight.eqsat.rewriting.SearcherPhase.search", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#search(egraph:EGraphT,input:InputT,parallelize:foresight.eqsat.parallel.ParallelMap):OutputT", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/rewriting\/patterns\/MachineSearcherPhase.html", "kind" : "case class"}, {"name" : "foresight.eqsat.rewriting.patterns.MachineState", "shortDescription" : "The state of a pattern machine.", "object" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html", "members_object" : [{"label" : "apply", "tail" : "(root: EClassCall): MachineState[NodeT]", "member" : "foresight.eqsat.rewriting.patterns.MachineState.apply", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#apply[NodeT](root:foresight.eqsat.EClassCall):foresight.eqsat.rewriting.patterns.MachineState[NodeT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineState[NodeT]) => Boolean, msg: => Any): MachineState[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MachineState[NodeT]) => Boolean): MachineState[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MachineState[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MachineState[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MachineState[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MachineState[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "bindVar", "tail" : "(variable: Var[NodeT], value: EClassCall): MachineState[NodeT]", "member" : "foresight.eqsat.rewriting.patterns.MachineState.bindVar", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#bindVar(variable:foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT],value:foresight.eqsat.EClassCall):foresight.eqsat.rewriting.patterns.MachineState[NodeT]", "kind" : "def"}, {"label" : "bindNode", "tail" : "(node: ENode[NodeT], definitions: Seq[Slot], uses: Seq[Slot]): MachineState[NodeT]", "member" : "foresight.eqsat.rewriting.patterns.MachineState.bindNode", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#bindNode(node:foresight.eqsat.ENode[NodeT],definitions:Seq[foresight.eqsat.Slot],uses:Seq[foresight.eqsat.Slot]):foresight.eqsat.rewriting.patterns.MachineState[NodeT]", "kind" : "def"}, {"member" : "foresight.eqsat.rewriting.patterns.MachineState#<init>", "error" : "unsupported entity"}, {"label" : "boundNodes", "tail" : ": Seq[ENode[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.MachineState.boundNodes", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#boundNodes:Seq[foresight.eqsat.ENode[NodeT]]", "kind" : "val"}, {"label" : "boundSlots", "tail" : ": Map[Slot, Slot]", "member" : "foresight.eqsat.rewriting.patterns.MachineState.boundSlots", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#boundSlots:Map[foresight.eqsat.Slot,foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "boundVars", "tail" : ": Map[Var[NodeT], EClassCall]", "member" : "foresight.eqsat.rewriting.patterns.MachineState.boundVars", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#boundVars:Map[foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT],foresight.eqsat.EClassCall]", "kind" : "val"}, {"label" : "registers", "tail" : ": Seq[EClassCall]", "member" : "foresight.eqsat.rewriting.patterns.MachineState.registers", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#registers:Seq[foresight.eqsat.EClassCall]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/rewriting\/patterns\/MachineState.html", "kind" : "case class"}, {"name" : "foresight.eqsat.rewriting.patterns.Pattern", "object" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html", "members_object" : [{"label" : "Var", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.Pattern.Var", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#Var", "kind" : "object"}, {"label" : "Var", "tail" : "", "member" : "foresight.eqsat.rewriting.patterns.Pattern.Var", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#Var[NodeT]extendsPattern[NodeT]", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Pattern[NodeT]) => Boolean, msg: => Any): Pattern[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Pattern[NodeT]) => Boolean): Pattern[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Pattern[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Pattern[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Pattern[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Pattern[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/Pattern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A pattern that can be matched against e-classes in e-graphs."}, {"name" : "foresight.eqsat.rewriting.patterns.PatternApplier", "shortDescription" : "An applier that applies a pattern match to an e-graph.", "members_case class" : [{"label" : "flatMap", "tail" : "(f: (MatchT2, EGraphT) => Iterable[PatternMatch[NodeT]]): Applier[NodeT, MatchT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.flatMap", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#flatMap[MatchT2](f:(MatchT2,EGraphT)=>Iterable[MatchT]):foresight.eqsat.rewriting.Applier[NodeT,MatchT2,EGraphT]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (MatchT2, EGraphT) => PatternMatch[NodeT]): Applier[NodeT, MatchT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.map", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#map[MatchT2](f:(MatchT2,EGraphT)=>MatchT):foresight.eqsat.rewriting.Applier[NodeT,MatchT2,EGraphT]", "kind" : "def"}, {"label" : "filter", "tail" : "(filter: (PatternMatch[NodeT], EGraphT) => Boolean): Applier[NodeT, PatternMatch[NodeT], EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.filter", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#filter(filter:(MatchT,EGraphT)=>Boolean):foresight.eqsat.rewriting.Applier[NodeT,MatchT,EGraphT]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternApplier[NodeT, EGraphT]) => Boolean, msg: => Any): PatternApplier[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternApplier[NodeT, EGraphT]) => Boolean): PatternApplier[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PatternApplier[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PatternApplier[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PatternApplier[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PatternApplier[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "instantiate", "tail" : "(m: PatternMatch[NodeT]): MixedTree[NodeT, EClassSymbol]", "member" : "foresight.eqsat.rewriting.patterns.PatternApplier.instantiate", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#instantiate(m:foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]):foresight.eqsat.MixedTree[NodeT,foresight.eqsat.commands.EClassSymbol]", "kind" : "def"}, {"label" : "tryReverse", "tail" : "(): Option[Searcher[NodeT, Seq[PatternMatch[NodeT]], EGraphT]]", "member" : "foresight.eqsat.rewriting.patterns.PatternApplier.tryReverse", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#tryReverse:Option[foresight.eqsat.rewriting.Searcher[NodeT,Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]],EGraphT]]", "kind" : "def"}, {"label" : "apply", "tail" : "(m: PatternMatch[NodeT], egraph: EGraphT): Command[NodeT]", "member" : "foresight.eqsat.rewriting.patterns.PatternApplier.apply", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#apply(m:foresight.eqsat.rewriting.patterns.PatternMatch[NodeT],egraph:EGraphT):foresight.eqsat.commands.Command[NodeT]", "kind" : "def"}, {"member" : "foresight.eqsat.rewriting.patterns.PatternApplier#<init>", "error" : "unsupported entity"}, {"label" : "pattern", "tail" : ": MixedTree[NodeT, Pattern[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.PatternApplier.pattern", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#pattern:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.rewriting.patterns.Pattern[NodeT]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/rewriting\/patterns\/PatternApplier.html", "kind" : "case class"}, {"name" : "foresight.eqsat.rewriting.patterns.PatternCompiler", "shortDescription" : "A compiler that compiles patterns into a list of instructions for the pattern-matching virtual machine.", "object" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html", "members_object" : [{"label" : "compile", "tail" : "(pattern: MixedTree[NodeT, Pattern[NodeT]]): List[Instruction[NodeT, EGraphT]]", "member" : "foresight.eqsat.rewriting.patterns.PatternCompiler.compile", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#compile[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]](pattern:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.rewriting.patterns.Pattern[NodeT]]):List[foresight.eqsat.rewriting.patterns.Instruction[NodeT,EGraphT]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternCompiler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "foresight.eqsat.rewriting.patterns.PatternMatch", "shortDescription" : "A match of a pattern.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternMatch[NodeT]) => Boolean, msg: => Any): PatternMatch[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatternMatch[NodeT]) => Boolean): PatternMatch[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PatternMatch[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PatternMatch[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PatternMatch[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PatternMatch[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isIndependent", "tail" : "(expr: Var[NodeT], slots: Set[Slot]): Boolean", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.isIndependent", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#isIndependent(expr:foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT],slots:Set[foresight.eqsat.Slot]):Boolean", "kind" : "def"}, {"label" : "port", "tail" : "(egraph: EGraph[NodeT]): PatternMatch[NodeT]", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.port", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#port(egraph:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]", "kind" : "def"}, {"label" : "merge", "tail" : "(other: PatternMatch[NodeT]): PatternMatch[NodeT]", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.merge", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#merge(other:foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]):foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]", "kind" : "def"}, {"label" : "tryMerge", "tail" : "(other: PatternMatch[NodeT]): Option[PatternMatch[NodeT]]", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.tryMerge", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#tryMerge(other:foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]):Option[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]]", "kind" : "def"}, {"label" : "bind", "tail" : "(variable: Var[NodeT], value: MixedTree[NodeT, EClassCall]): PatternMatch[NodeT]", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.bind", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#bind(variable:foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT],value:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]", "kind" : "def"}, {"label" : "apply", "tail" : "(slot: Slot): Slot", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.apply", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#apply(slot:foresight.eqsat.Slot):foresight.eqsat.Slot", "kind" : "def"}, {"label" : "apply", "tail" : "(variable: Var[NodeT]): MixedTree[NodeT, EClassCall]", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.apply", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#apply(variable:foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT]):foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]", "kind" : "def"}, {"member" : "foresight.eqsat.rewriting.patterns.PatternMatch#<init>", "error" : "unsupported entity"}, {"label" : "slotMapping", "tail" : ": Map[Slot, Slot]", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.slotMapping", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#slotMapping:Map[foresight.eqsat.Slot,foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "varMapping", "tail" : ": Map[Var[NodeT], MixedTree[NodeT, EClassCall]]", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.varMapping", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#varMapping:Map[foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT],foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]]", "kind" : "val"}, {"label" : "root", "tail" : ": EClassCall", "member" : "foresight.eqsat.rewriting.patterns.PatternMatch.root", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#root:foresight.eqsat.EClassCall", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/rewriting\/patterns\/PatternMatch.html", "kind" : "case class"}], "foresight.eqsat.saturation.priorities" : [{"name" : "foresight.eqsat.saturation.priorities.CurveFittedPriorities", "shortDescription" : "A prioritization that reweights the priorities of matches based on a curve-fitted distribution.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CurveFittedPriorities[NodeT, RuleT, MatchT]) => Boolean, msg: => Any): CurveFittedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CurveFittedPriorities[NodeT, RuleT, MatchT]) => Boolean): CurveFittedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CurveFittedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CurveFittedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CurveFittedPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CurveFittedPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "reweight", "tail" : "(matches: Seq[PrioritizedMatch[RuleT, MatchT]]): Seq[PrioritizedMatch[RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.priorities.CurveFittedPriorities.reweight", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#reweight(matches:Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]):Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.priorities.CurveFittedPriorities#<init>", "error" : "unsupported entity"}, {"label" : "distribution", "tail" : ": DiscreteDistribution", "member" : "foresight.eqsat.saturation.priorities.CurveFittedPriorities.distribution", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#distribution:foresight.util.random.DiscreteDistribution", "kind" : "val"}, {"label" : "originalPriorities", "tail" : ": MatchPriorities[NodeT, RuleT, MatchT]", "member" : "foresight.eqsat.saturation.priorities.CurveFittedPriorities.originalPriorities", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#originalPriorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,RuleT,MatchT]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "batchSize", "tail" : "(matches: Seq[PrioritizedMatch[RuleT, MatchT]]): Int", "member" : "foresight.eqsat.saturation.priorities.ReweightedPriorities.batchSize", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#batchSize(matches:Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]):Int", "kind" : "def"}, {"label" : "prioritize", "tail" : "(matches: Seq[(RuleT, MatchT)]): Seq[PrioritizedMatch[RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.priorities.ReweightedPriorities.prioritize", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#prioritize(matches:Seq[(RuleT,MatchT)]):Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/priorities\/CurveFittedPriorities.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.priorities.MatchPriorities", "trait" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatchPriorities[NodeT, RuleT, MatchT]) => Boolean, msg: => Any): MatchPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MatchPriorities[NodeT, RuleT, MatchT]) => Boolean): MatchPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MatchPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MatchPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MatchPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MatchPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "batchSize", "tail" : "(matches: Seq[PrioritizedMatch[RuleT, MatchT]]): Int", "member" : "foresight.eqsat.saturation.priorities.MatchPriorities.batchSize", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#batchSize(matches:Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]):Int", "kind" : "abstract def"}, {"label" : "prioritize", "tail" : "(matches: Seq[(RuleT, MatchT)]): Seq[PrioritizedMatch[RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.priorities.MatchPriorities.prioritize", "link" : "foresight\/eqsat\/saturation\/priorities\/MatchPriorities.html#prioritize(matches:Seq[(RuleT,MatchT)]):Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]", "kind" : "abstract def"}], "shortDescription" : "A trait that defines a prioritization for matches found during rule application."}, {"name" : "foresight.eqsat.saturation.priorities.PrioritizedMatch", "shortDescription" : "A case class representing a prioritized match.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrioritizedMatch[RuleT, MatchT]) => Boolean, msg: => Any): PrioritizedMatch[RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrioritizedMatch[RuleT, MatchT]) => Boolean): PrioritizedMatch[RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PrioritizedMatch[RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PrioritizedMatch[RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PrioritizedMatch[RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PrioritizedMatch[RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.priorities.PrioritizedMatch#<init>", "error" : "unsupported entity"}, {"label" : "priority", "tail" : ": Double", "member" : "foresight.eqsat.saturation.priorities.PrioritizedMatch.priority", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#priority:Double", "kind" : "val"}, {"label" : "ruleMatch", "tail" : ": MatchT", "member" : "foresight.eqsat.saturation.priorities.PrioritizedMatch.ruleMatch", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#ruleMatch:MatchT", "kind" : "val"}, {"label" : "rule", "tail" : ": RuleT", "member" : "foresight.eqsat.saturation.priorities.PrioritizedMatch.rule", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#rule:RuleT", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/priorities\/PrioritizedMatch.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.priorities.ReweightedPriorities", "trait" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReweightedPriorities[NodeT, RuleT, MatchT]) => Boolean, msg: => Any): ReweightedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReweightedPriorities[NodeT, RuleT, MatchT]) => Boolean): ReweightedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ReweightedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReweightedPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReweightedPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReweightedPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "batchSize", "tail" : "(matches: Seq[PrioritizedMatch[RuleT, MatchT]]): Int", "member" : "foresight.eqsat.saturation.priorities.ReweightedPriorities.batchSize", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#batchSize(matches:Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]):Int", "kind" : "def"}, {"label" : "prioritize", "tail" : "(matches: Seq[(RuleT, MatchT)]): Seq[PrioritizedMatch[RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.priorities.ReweightedPriorities.prioritize", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#prioritize(matches:Seq[(RuleT,MatchT)]):Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reweight", "tail" : "(matches: Seq[PrioritizedMatch[RuleT, MatchT]]): Seq[PrioritizedMatch[RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.priorities.ReweightedPriorities.reweight", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#reweight(matches:Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]):Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]", "kind" : "abstract def"}, {"label" : "originalPriorities", "tail" : "(): MatchPriorities[NodeT, RuleT, MatchT]", "member" : "foresight.eqsat.saturation.priorities.ReweightedPriorities.originalPriorities", "link" : "foresight\/eqsat\/saturation\/priorities\/ReweightedPriorities.html#originalPriorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,RuleT,MatchT]", "kind" : "abstract def"}], "shortDescription" : "A prioritization that reweights the priorities of matches as originally weighted by another MatchPrioritiesinstance."}, {"name" : "foresight.eqsat.saturation.priorities.UniformPriorities", "shortDescription" : "A prioritization that assigns a uniform priority to all matches.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (UniformPriorities[NodeT, RuleT, MatchT]) => Boolean, msg: => Any): UniformPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (UniformPriorities[NodeT, RuleT, MatchT]) => Boolean): UniformPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): UniformPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): UniformPriorities[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (UniformPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (UniformPriorities[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "batchSize", "tail" : "(matches: Seq[PrioritizedMatch[RuleT, MatchT]]): Int", "member" : "foresight.eqsat.saturation.priorities.UniformPriorities.batchSize", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#batchSize(matches:Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]):Int", "kind" : "def"}, {"label" : "prioritize", "tail" : "(matches: Seq[(RuleT, MatchT)]): Seq[PrioritizedMatch[RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.priorities.UniformPriorities.prioritize", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#prioritize(matches:Seq[(RuleT,MatchT)]):Seq[foresight.eqsat.saturation.priorities.PrioritizedMatch[RuleT,MatchT]]", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.priorities.UniformPriorities#<init>", "error" : "unsupported entity"}, {"label" : "maxBatchSize", "tail" : ": Int", "member" : "foresight.eqsat.saturation.priorities.UniformPriorities.maxBatchSize", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#maxBatchSize:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/priorities\/UniformPriorities.html", "kind" : "case class"}], "foresight.eqsat" : [{"name" : "foresight.eqsat.AddNodeResult", "object" : "foresight\/eqsat\/AddNodeResult$.html", "members_object" : [{"label" : "Added", "tail" : "", "member" : "foresight.eqsat.AddNodeResult.Added", "link" : "foresight\/eqsat\/AddNodeResult$.html#AddedextendsAddNodeResultwithProductwithSerializable", "kind" : "final case class"}, {"label" : "AlreadyThere", "tail" : "", "member" : "foresight.eqsat.AddNodeResult.AlreadyThere", "link" : "foresight\/eqsat\/AddNodeResult$.html#AlreadyThereextendsAddNodeResultwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/AddNodeResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/AddNodeResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/AddNodeResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/AddNodeResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/AddNodeResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/AddNodeResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/AddNodeResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/AddNodeResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/AddNodeResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/AddNodeResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/AddNodeResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/AddNodeResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/AddNodeResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/AddNodeResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/AddNodeResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/AddNodeResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/AddNodeResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/AddNodeResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/AddNodeResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/AddNodeResult.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/AddNodeResult.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/AddNodeResult.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddNodeResult) => Boolean, msg: => Any): AddNodeResult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/AddNodeResult.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AddNodeResult) => Boolean): AddNodeResult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/AddNodeResult.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AddNodeResult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/AddNodeResult.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AddNodeResult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/AddNodeResult.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AddNodeResult, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/AddNodeResult.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AddNodeResult, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/AddNodeResult.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/AddNodeResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/AddNodeResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/AddNodeResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/AddNodeResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/AddNodeResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/AddNodeResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/AddNodeResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/AddNodeResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/AddNodeResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/AddNodeResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/AddNodeResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/AddNodeResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/AddNodeResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/AddNodeResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/AddNodeResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/AddNodeResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/AddNodeResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/AddNodeResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/AddNodeResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(): EClassCall", "member" : "foresight.eqsat.AddNodeResult.call", "link" : "foresight\/eqsat\/AddNodeResult.html#call:foresight.eqsat.EClassCall", "kind" : "abstract def"}], "shortDescription" : "The result of adding a node to the e-graph."}, {"name" : "foresight.eqsat.EClassCall", "shortDescription" : "An application of an e-class reference to arguments.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/EClassCall.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/EClassCall.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EClassCall) => Boolean, msg: => Any): EClassCall", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassCall.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EClassCall) => Boolean): EClassCall", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassCall.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EClassCall", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassCall.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EClassCall", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassCall.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EClassCall, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/EClassCall.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EClassCall, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/EClassCall.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isWellFormed", "tail" : "(egraph: EGraph[_]): Boolean", "member" : "foresight.eqsat.EClassCall.isWellFormed", "link" : "foresight\/eqsat\/EClassCall.html#isWellFormed(egraph:foresight.eqsat.EGraph[_]):Boolean", "kind" : "def"}, {"label" : "renamePartial", "tail" : "(renaming: SlotMap): EClassCall", "member" : "foresight.eqsat.EClassCall.renamePartial", "link" : "foresight\/eqsat\/EClassCall.html#renamePartial(renaming:foresight.eqsat.SlotMap):foresight.eqsat.EClassCall", "kind" : "def"}, {"label" : "rename", "tail" : "(renaming: SlotMap): EClassCall", "member" : "foresight.eqsat.EClassCall.rename", "link" : "foresight\/eqsat\/EClassCall.html#rename(renaming:foresight.eqsat.SlotMap):foresight.eqsat.EClassCall", "kind" : "def"}, {"label" : "slotSet", "tail" : "(): Set[Slot]", "member" : "foresight.eqsat.EClassCall.slotSet", "link" : "foresight\/eqsat\/EClassCall.html#slotSet:Set[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "slots", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.EClassCall.slots", "link" : "foresight\/eqsat\/EClassCall.html#slots:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"member" : "foresight.eqsat.EClassCall#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": SlotMap", "member" : "foresight.eqsat.EClassCall.args", "link" : "foresight\/eqsat\/EClassCall.html#args:foresight.eqsat.SlotMap", "kind" : "val"}, {"label" : "ref", "tail" : ": EClassRef", "member" : "foresight.eqsat.EClassCall.ref", "link" : "foresight\/eqsat\/EClassCall.html#ref:foresight.eqsat.EClassRef", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/EClassCall.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/EClassCall.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/EClassCall.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/EClassCall.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/EClassCall.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/EClassCall.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/EClassCall.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/EClassCall.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EClassCall.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EClassCall.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EClassCall.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/EClassCall.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/EClassCall.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/EClassCall.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/EClassCall.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/EClassCall.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/EClassCall.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/EClassCall.html", "kind" : "case class"}, {"name" : "foresight.eqsat.EClassRef", "shortDescription" : "A reference to an e-class.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/EClassRef.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/EClassRef.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EClassRef) => Boolean, msg: => Any): EClassRef", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassRef.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EClassRef) => Boolean): EClassRef", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassRef.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EClassRef", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassRef.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EClassRef", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EClassRef.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EClassRef, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/EClassRef.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EClassRef, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/EClassRef.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "foresight.eqsat.EClassRef#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/EClassRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/EClassRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/EClassRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/EClassRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/EClassRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/EClassRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/EClassRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EClassRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EClassRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EClassRef.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/EClassRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/EClassRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/EClassRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/EClassRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/EClassRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/EClassRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/EClassRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/EClassRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/EClassRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "foresight\/eqsat\/EClassRef.html", "kind" : "class"}, {"name" : "foresight.eqsat.EGraph", "object" : "foresight\/eqsat\/EGraph$.html", "members_object" : [{"label" : "from", "tail" : "(tree: MixedTree[NodeT, Nothing]): (EClassCall, EGraph[NodeT])", "member" : "foresight.eqsat.EGraph.from", "link" : "foresight\/eqsat\/EGraph$.html#from[NodeT](tree:foresight.eqsat.MixedTree[NodeT,Nothing]):(foresight.eqsat.EClassCall,foresight.eqsat.EGraph[NodeT])", "kind" : "def"}, {"label" : "empty", "tail" : "(): EGraph[NodeT]", "member" : "foresight.eqsat.EGraph.empty", "link" : "foresight\/eqsat\/EGraph$.html#empty[NodeT]:foresight.eqsat.EGraph[NodeT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/EGraph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/EGraph$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/EGraph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/EGraph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/EGraph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/EGraph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/EGraph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraph$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/EGraph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/EGraph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/EGraph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/EGraph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/EGraph$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/EGraph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/EGraph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/EGraph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/EGraph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/EGraph.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/EGraph.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/EGraph.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraph[NodeT]) => Boolean, msg: => Any): EGraph[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraph.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraph[NodeT]) => Boolean): EGraph[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraph.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EGraph[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraph.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EGraph[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraph.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EGraph[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/EGraph.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EGraph[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/EGraph.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(): EGraphWithMetadata[NodeT, EGraph[NodeT]]", "member" : "foresight.eqsat.EGraphLike.withMetadata", "link" : "foresight\/eqsat\/EGraph.html#withMetadata:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,This]", "kind" : "final def"}, {"label" : "union", "tail" : "(left: EClassCall, right: EClassCall): EGraphWithPendingUnions[EGraph[NodeT]]", "member" : "foresight.eqsat.EGraphLike.union", "link" : "foresight\/eqsat\/EGraph.html#union(left:foresight.eqsat.EClassCall,right:foresight.eqsat.EClassCall):foresight.eqsat.EGraphWithPendingUnions[This]", "kind" : "final def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)]): (Set[Set[EClassCall]], EGraph[NodeT])", "member" : "foresight.eqsat.EGraphLike.unionMany", "link" : "foresight\/eqsat\/EGraph.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)]):(Set[Set[foresight.eqsat.EClassCall]],This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: Tree[NodeT]): (EClassCall, EGraph[NodeT])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/EGraph.html#add(tree:foresight.eqsat.Tree[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: MixedTree[NodeT, EClassCall]): (EClassCall, EGraph[NodeT])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/EGraph.html#add(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(node: ENode[NodeT]): (EClassCall, EGraph[NodeT])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/EGraph.html#add(node:foresight.eqsat.ENode[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: Tree[NodeT]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/EGraph.html#find(tree:foresight.eqsat.Tree[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: MixedTree[NodeT, EClassCall]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/EGraph.html#find(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: Tree[NodeT]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraph.html#contains(tree:foresight.eqsat.Tree[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: MixedTree[NodeT, EClassCall]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraph.html#contains(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(node: ENode[NodeT]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraph.html#contains(node:foresight.eqsat.ENode[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(ref: EClassRef): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraph.html#contains(ref:foresight.eqsat.EClassRef):Boolean", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(call: EClassCall): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/EGraph.html#canonicalize(call:foresight.eqsat.EClassCall):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(ref: EClassRef): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/EGraph.html#canonicalize(ref:foresight.eqsat.EClassRef):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "nodeCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.nodeCount", "link" : "foresight\/eqsat\/EGraph.html#nodeCount:Int", "kind" : "final def"}, {"label" : "classCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.classCount", "link" : "foresight\/eqsat\/EGraph.html#classCount:Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/EGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/EGraph.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/EGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/EGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/EGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/EGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/EGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/EGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/EGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/EGraph.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/EGraph.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/EGraph.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/EGraph.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/EGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/EGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/EGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "emptied", "tail" : "(): EGraph[NodeT]", "member" : "foresight.eqsat.EGraphLike.emptied", "link" : "foresight\/eqsat\/EGraph.html#emptied:This", "kind" : "abstract def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)], parallelize: ParallelMap): (Set[Set[EClassCall]], EGraph[NodeT])", "member" : "foresight.eqsat.EGraphLike.unionMany", "link" : "foresight\/eqsat\/EGraph.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)],parallelize:foresight.eqsat.parallel.ParallelMap):(Set[Set[foresight.eqsat.EClassCall]],This)", "kind" : "abstract def"}, {"label" : "tryAddMany", "tail" : "(nodes: Seq[ENode[NodeT]], parallelize: ParallelMap): (Seq[AddNodeResult], EGraph[NodeT])", "member" : "foresight.eqsat.EGraphLike.tryAddMany", "link" : "foresight\/eqsat\/EGraph.html#tryAddMany(nodes:Seq[foresight.eqsat.ENode[NodeT]],parallelize:foresight.eqsat.parallel.ParallelMap):(Seq[foresight.eqsat.AddNodeResult],This)", "kind" : "abstract def"}, {"label" : "areSame", "tail" : "(first: EClassCall, second: EClassCall): Boolean", "member" : "foresight.eqsat.EGraphLike.areSame", "link" : "foresight\/eqsat\/EGraph.html#areSame(first:foresight.eqsat.EClassCall,second:foresight.eqsat.EClassCall):Boolean", "kind" : "abstract def"}, {"label" : "find", "tail" : "(node: ENode[NodeT]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/EGraph.html#find(node:foresight.eqsat.ENode[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "abstract def"}, {"label" : "users", "tail" : "(ref: EClassRef): Set[ENode[NodeT]]", "member" : "foresight.eqsat.EGraphLike.users", "link" : "foresight\/eqsat\/EGraph.html#users(ref:foresight.eqsat.EClassRef):Set[foresight.eqsat.ENode[NodeT]]", "kind" : "abstract def"}, {"label" : "nodes", "tail" : "(call: EClassCall): Set[ENode[NodeT]]", "member" : "foresight.eqsat.EGraphLike.nodes", "link" : "foresight\/eqsat\/EGraph.html#nodes(call:foresight.eqsat.EClassCall):Set[foresight.eqsat.ENode[NodeT]]", "kind" : "abstract def"}, {"label" : "classes", "tail" : "(): Iterable[EClassRef]", "member" : "foresight.eqsat.EGraphLike.classes", "link" : "foresight\/eqsat\/EGraph.html#classes:Iterable[foresight.eqsat.EClassRef]", "kind" : "abstract def"}, {"label" : "canonicalize", "tail" : "(node: ENode[NodeT]): ShapeCall[NodeT]", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/EGraph.html#canonicalize(node:foresight.eqsat.ENode[NodeT]):foresight.eqsat.ShapeCall[NodeT]", "kind" : "abstract def"}, {"label" : "tryCanonicalize", "tail" : "(ref: EClassRef): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.tryCanonicalize", "link" : "foresight\/eqsat\/EGraph.html#tryCanonicalize(ref:foresight.eqsat.EClassRef):Option[foresight.eqsat.EClassCall]", "kind" : "abstract def"}], "shortDescription" : "An immutable e-graph structure that provides a core API for working with e-classes and e-nodes."}, {"name" : "foresight.eqsat.EGraphLike", "trait" : "foresight\/eqsat\/EGraphLike.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/EGraphLike.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/EGraphLike.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphLike[NodeT, This]) => Boolean, msg: => Any): EGraphLike[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphLike.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphLike[NodeT, This]) => Boolean): EGraphLike[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphLike.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EGraphLike[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphLike.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EGraphLike[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphLike.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EGraphLike[NodeT, This], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/EGraphLike.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EGraphLike[NodeT, This], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/EGraphLike.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(): EGraphWithMetadata[NodeT, This]", "member" : "foresight.eqsat.EGraphLike.withMetadata", "link" : "foresight\/eqsat\/EGraphLike.html#withMetadata:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,This]", "kind" : "final def"}, {"label" : "union", "tail" : "(left: EClassCall, right: EClassCall): EGraphWithPendingUnions[This]", "member" : "foresight.eqsat.EGraphLike.union", "link" : "foresight\/eqsat\/EGraphLike.html#union(left:foresight.eqsat.EClassCall,right:foresight.eqsat.EClassCall):foresight.eqsat.EGraphWithPendingUnions[This]", "kind" : "final def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)]): (Set[Set[EClassCall]], This)", "member" : "foresight.eqsat.EGraphLike.unionMany", "link" : "foresight\/eqsat\/EGraphLike.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)]):(Set[Set[foresight.eqsat.EClassCall]],This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: Tree[NodeT]): (EClassCall, This)", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/EGraphLike.html#add(tree:foresight.eqsat.Tree[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: MixedTree[NodeT, EClassCall]): (EClassCall, This)", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/EGraphLike.html#add(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(node: ENode[NodeT]): (EClassCall, This)", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/EGraphLike.html#add(node:foresight.eqsat.ENode[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: Tree[NodeT]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/EGraphLike.html#find(tree:foresight.eqsat.Tree[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: MixedTree[NodeT, EClassCall]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/EGraphLike.html#find(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: Tree[NodeT]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraphLike.html#contains(tree:foresight.eqsat.Tree[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: MixedTree[NodeT, EClassCall]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraphLike.html#contains(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(node: ENode[NodeT]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraphLike.html#contains(node:foresight.eqsat.ENode[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(ref: EClassRef): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/EGraphLike.html#contains(ref:foresight.eqsat.EClassRef):Boolean", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(call: EClassCall): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/EGraphLike.html#canonicalize(call:foresight.eqsat.EClassCall):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(ref: EClassRef): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/EGraphLike.html#canonicalize(ref:foresight.eqsat.EClassRef):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "nodeCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.nodeCount", "link" : "foresight\/eqsat\/EGraphLike.html#nodeCount:Int", "kind" : "final def"}, {"label" : "classCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.classCount", "link" : "foresight\/eqsat\/EGraphLike.html#classCount:Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/EGraphLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/EGraphLike.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/EGraphLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/EGraphLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/EGraphLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/EGraphLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/EGraphLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphLike.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/EGraphLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/EGraphLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/EGraphLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/EGraphLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/EGraphLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/EGraphLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/EGraphLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/EGraphLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/EGraphLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "emptied", "tail" : "(): This", "member" : "foresight.eqsat.EGraphLike.emptied", "link" : "foresight\/eqsat\/EGraphLike.html#emptied:This", "kind" : "abstract def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)], parallelize: ParallelMap): (Set[Set[EClassCall]], This)", "member" : "foresight.eqsat.EGraphLike.unionMany", "link" : "foresight\/eqsat\/EGraphLike.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)],parallelize:foresight.eqsat.parallel.ParallelMap):(Set[Set[foresight.eqsat.EClassCall]],This)", "kind" : "abstract def"}, {"label" : "tryAddMany", "tail" : "(nodes: Seq[ENode[NodeT]], parallelize: ParallelMap): (Seq[AddNodeResult], This)", "member" : "foresight.eqsat.EGraphLike.tryAddMany", "link" : "foresight\/eqsat\/EGraphLike.html#tryAddMany(nodes:Seq[foresight.eqsat.ENode[NodeT]],parallelize:foresight.eqsat.parallel.ParallelMap):(Seq[foresight.eqsat.AddNodeResult],This)", "kind" : "abstract def"}, {"label" : "areSame", "tail" : "(first: EClassCall, second: EClassCall): Boolean", "member" : "foresight.eqsat.EGraphLike.areSame", "link" : "foresight\/eqsat\/EGraphLike.html#areSame(first:foresight.eqsat.EClassCall,second:foresight.eqsat.EClassCall):Boolean", "kind" : "abstract def"}, {"label" : "find", "tail" : "(node: ENode[NodeT]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/EGraphLike.html#find(node:foresight.eqsat.ENode[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "abstract def"}, {"label" : "users", "tail" : "(ref: EClassRef): Set[ENode[NodeT]]", "member" : "foresight.eqsat.EGraphLike.users", "link" : "foresight\/eqsat\/EGraphLike.html#users(ref:foresight.eqsat.EClassRef):Set[foresight.eqsat.ENode[NodeT]]", "kind" : "abstract def"}, {"label" : "nodes", "tail" : "(call: EClassCall): Set[ENode[NodeT]]", "member" : "foresight.eqsat.EGraphLike.nodes", "link" : "foresight\/eqsat\/EGraphLike.html#nodes(call:foresight.eqsat.EClassCall):Set[foresight.eqsat.ENode[NodeT]]", "kind" : "abstract def"}, {"label" : "classes", "tail" : "(): Iterable[EClassRef]", "member" : "foresight.eqsat.EGraphLike.classes", "link" : "foresight\/eqsat\/EGraphLike.html#classes:Iterable[foresight.eqsat.EClassRef]", "kind" : "abstract def"}, {"label" : "canonicalize", "tail" : "(node: ENode[NodeT]): ShapeCall[NodeT]", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/EGraphLike.html#canonicalize(node:foresight.eqsat.ENode[NodeT]):foresight.eqsat.ShapeCall[NodeT]", "kind" : "abstract def"}, {"label" : "tryCanonicalize", "tail" : "(ref: EClassRef): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.tryCanonicalize", "link" : "foresight\/eqsat\/EGraphLike.html#tryCanonicalize(ref:foresight.eqsat.EClassRef):Option[foresight.eqsat.EClassCall]", "kind" : "abstract def"}], "shortDescription" : "An immutable e-graph structure that provides a core API for working with e-classes and e-nodes."}, {"name" : "foresight.eqsat.EGraphWithPendingUnions", "shortDescription" : "An e-graph with pending unions.", "object" : "foresight\/eqsat\/EGraphWithPendingUnions$.html", "members_object" : [{"label" : "apply", "tail" : "(egraph: Repr): EGraphWithPendingUnions[Repr]", "member" : "foresight.eqsat.EGraphWithPendingUnions.apply", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#apply[Repr<:foresight.eqsat.EGraphLike[_,Repr]withforesight.eqsat.EGraph[_]](egraph:Repr):foresight.eqsat.EGraphWithPendingUnions[Repr]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/EGraphWithPendingUnions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithPendingUnions[Repr]) => Boolean, msg: => Any): EGraphWithPendingUnions[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithPendingUnions[Repr]) => Boolean): EGraphWithPendingUnions[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EGraphWithPendingUnions[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EGraphWithPendingUnions[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EGraphWithPendingUnions[Repr], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EGraphWithPendingUnions[Repr], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "rebuilt", "tail" : "(): Repr", "member" : "foresight.eqsat.EGraphWithPendingUnions.rebuilt", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#rebuilt:Repr", "kind" : "def"}, {"label" : "rebuild", "tail" : "(parallelize: ParallelMap): Repr", "member" : "foresight.eqsat.EGraphWithPendingUnions.rebuild", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#rebuild(parallelize:foresight.eqsat.parallel.ParallelMap):Repr", "kind" : "def"}, {"label" : "union", "tail" : "(left: EClassCall, right: EClassCall): EGraphWithPendingUnions[Repr]", "member" : "foresight.eqsat.EGraphWithPendingUnions.union", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#union(left:foresight.eqsat.EClassCall,right:foresight.eqsat.EClassCall):foresight.eqsat.EGraphWithPendingUnions[Repr]", "kind" : "def"}, {"label" : "requiresRebuild", "tail" : "(): Boolean", "member" : "foresight.eqsat.EGraphWithPendingUnions.requiresRebuild", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#requiresRebuild:Boolean", "kind" : "def"}, {"member" : "foresight.eqsat.EGraphWithPendingUnions#<init>", "error" : "unsupported entity"}, {"label" : "pending", "tail" : ": List[(EClassCall, EClassCall)]", "member" : "foresight.eqsat.EGraphWithPendingUnions.pending", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#pending:List[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)]", "kind" : "val"}, {"label" : "egraph", "tail" : ": Repr", "member" : "foresight.eqsat.EGraphWithPendingUnions.egraph", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#egraph:Repr", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/EGraphWithPendingUnions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/EGraphWithPendingUnions.html", "kind" : "case class"}, {"name" : "foresight.eqsat.ENode", "shortDescription" : "An e-node in an e-graph.", "object" : "foresight\/eqsat\/ENode$.html", "members_object" : [{"label" : "unslotted", "tail" : "(nodeType: NodeT, args: Seq[EClassCall]): ENode[NodeT]", "member" : "foresight.eqsat.ENode.unslotted", "link" : "foresight\/eqsat\/ENode$.html#unslotted[NodeT](nodeType:NodeT,args:Seq[foresight.eqsat.EClassCall]):foresight.eqsat.ENode[NodeT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/ENode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/ENode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/ENode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/ENode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/ENode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/ENode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/ENode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ENode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ENode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ENode$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/ENode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/ENode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/ENode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/ENode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/ENode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/ENode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/ENode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/ENode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/ENode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/ENode.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/ENode.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ENode[NodeT]) => Boolean, msg: => Any): ENode[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ENode.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ENode[NodeT]) => Boolean): ENode[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ENode.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ENode[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ENode.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ENode[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ENode.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ENode[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/ENode.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ENode[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/ENode.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isShape", "tail" : "(): Boolean", "member" : "foresight.eqsat.ENode.isShape", "link" : "foresight\/eqsat\/ENode.html#isShape:Boolean", "kind" : "def"}, {"label" : "asShapeCall", "tail" : "(): ShapeCall[NodeT]", "member" : "foresight.eqsat.ENode.asShapeCall", "link" : "foresight\/eqsat\/ENode.html#asShapeCall:foresight.eqsat.ShapeCall[NodeT]", "kind" : "def"}, {"label" : "rename", "tail" : "(renaming: SlotMap): ENode[NodeT]", "member" : "foresight.eqsat.ENode.rename", "link" : "foresight\/eqsat\/ENode.html#rename(renaming:foresight.eqsat.SlotMap):foresight.eqsat.ENode[NodeT]", "kind" : "def"}, {"label" : "slotSet", "tail" : "(): Set[Slot]", "member" : "foresight.eqsat.ENode.slotSet", "link" : "foresight\/eqsat\/ENode.html#slotSet:Set[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "slots", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.ENode.slots", "link" : "foresight\/eqsat\/ENode.html#slots:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"member" : "foresight.eqsat.ENode#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Seq[EClassCall]", "member" : "foresight.eqsat.ENode.args", "link" : "foresight\/eqsat\/ENode.html#args:Seq[foresight.eqsat.EClassCall]", "kind" : "val"}, {"label" : "uses", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.ENode.uses", "link" : "foresight\/eqsat\/ENode.html#uses:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "definitions", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.ENode.definitions", "link" : "foresight\/eqsat\/ENode.html#definitions:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "nodeType", "tail" : ": NodeT", "member" : "foresight.eqsat.ENode.nodeType", "link" : "foresight\/eqsat\/ENode.html#nodeType:NodeT", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/ENode.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/ENode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/ENode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/ENode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/ENode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/ENode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/ENode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/ENode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ENode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ENode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ENode.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/ENode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/ENode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/ENode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/ENode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/ENode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/ENode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/ENode.html", "kind" : "case class"}, {"name" : "foresight.eqsat.MixedTree", "object" : "foresight\/eqsat\/MixedTree$.html", "members_object" : [{"label" : "MixedTreeOfPatternOps", "tail" : "", "member" : "foresight.eqsat.MixedTree.MixedTreeOfPatternOps", "link" : "foresight\/eqsat\/MixedTree$.html#MixedTreeOfPatternOps[NodeT]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "MixedTreeOfEClassCallOps", "tail" : "", "member" : "foresight.eqsat.MixedTree.MixedTreeOfEClassCallOps", "link" : "foresight\/eqsat\/MixedTree$.html#MixedTreeOfEClassCallOps[NodeT]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fromTree", "tail" : "(tree: Tree[NodeT]): MixedTree[NodeT, A]", "member" : "foresight.eqsat.MixedTree.fromTree", "link" : "foresight\/eqsat\/MixedTree$.html#fromTree[NodeT,A](tree:foresight.eqsat.Tree[NodeT]):foresight.eqsat.MixedTree[NodeT,A]", "kind" : "implicit def"}, {"label" : "fromENode", "tail" : "(node: ENode[NodeT]): MixedTree[NodeT, EClassCall]", "member" : "foresight.eqsat.MixedTree.fromENode", "link" : "foresight\/eqsat\/MixedTree$.html#fromENode[NodeT](node:foresight.eqsat.ENode[NodeT]):foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]", "kind" : "implicit def"}, {"label" : "Call", "tail" : "", "member" : "foresight.eqsat.MixedTree.Call", "link" : "foresight\/eqsat\/MixedTree$.html#Call[NodeT,CallT]extendsMixedTree[NodeT,CallT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Node", "tail" : "", "member" : "foresight.eqsat.MixedTree.Node", "link" : "foresight\/eqsat\/MixedTree$.html#Node[NodeT,CallT]extendsMixedTree[NodeT,CallT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "unslotted", "tail" : "(nodeType: NodeT, children: Seq[MixedTree[NodeT, CallT]]): MixedTree[NodeT, CallT]", "member" : "foresight.eqsat.MixedTree.unslotted", "link" : "foresight\/eqsat\/MixedTree$.html#unslotted[NodeT,CallT](nodeType:NodeT,children:Seq[foresight.eqsat.MixedTree[NodeT,CallT]]):foresight.eqsat.MixedTree[NodeT,CallT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/MixedTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/MixedTree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/MixedTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/MixedTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/MixedTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/MixedTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/MixedTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/MixedTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/MixedTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/MixedTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/MixedTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/MixedTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/MixedTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/MixedTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/MixedTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/MixedTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/MixedTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/MixedTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/MixedTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/MixedTree.html", "kind" : "trait", "members_trait" : [{"label" : "toApplier", "tail" : "(): PatternApplier[NodeT, EGraphT]", "member" : "foresight.eqsat.MixedTree.MixedTreeOfPatternOps.toApplier", "link" : "foresight\/eqsat\/MixedTree.html#toApplier[EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]:foresight.eqsat.rewriting.patterns.PatternApplier[NodeT,EGraphT]", "kind" : "def"}, {"label" : "toSearcher", "tail" : "(): ReversibleSearcher[NodeT, PatternMatch[NodeT], EGraphT]", "member" : "foresight.eqsat.MixedTree.MixedTreeOfPatternOps.toSearcher", "link" : "foresight\/eqsat\/MixedTree.html#toSearcher[EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]:foresight.eqsat.rewriting.ReversibleSearcher[NodeT,foresight.eqsat.rewriting.patterns.PatternMatch[NodeT],EGraphT]", "kind" : "def"}, {"label" : "compiled", "tail" : "(): CompiledPattern[NodeT, EGraphT]", "member" : "foresight.eqsat.MixedTree.MixedTreeOfPatternOps.compiled", "link" : "foresight\/eqsat\/MixedTree.html#compiled[EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]:foresight.eqsat.rewriting.patterns.CompiledPattern[NodeT,EGraphT]", "kind" : "def"}, {"label" : "slotSet", "tail" : "(): Set[Slot]", "member" : "foresight.eqsat.MixedTree.MixedTreeOfEClassCallOps.slotSet", "link" : "foresight\/eqsat\/MixedTree.html#slotSet:Set[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/MixedTree.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/MixedTree.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MixedTree[NodeT, CallT]) => Boolean, msg: => Any): MixedTree[NodeT, CallT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/MixedTree.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MixedTree[NodeT, CallT]) => Boolean): MixedTree[NodeT, CallT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/MixedTree.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MixedTree[NodeT, CallT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/MixedTree.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MixedTree[NodeT, CallT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/MixedTree.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MixedTree[NodeT, CallT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/MixedTree.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MixedTree[NodeT, CallT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/MixedTree.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "mapCalls", "tail" : "(f: (CallT) => NewCallT): MixedTree[NodeT, NewCallT]", "member" : "foresight.eqsat.MixedTree.mapCalls", "link" : "foresight\/eqsat\/MixedTree.html#mapCalls[NewCallT](f:CallT=>NewCallT):foresight.eqsat.MixedTree[NodeT,NewCallT]", "kind" : "def"}, {"label" : "mapNodes", "tail" : "(f: (NodeT) => NewNodeT): MixedTree[NewNodeT, CallT]", "member" : "foresight.eqsat.MixedTree.mapNodes", "link" : "foresight\/eqsat\/MixedTree.html#mapNodes[NewNodeT](f:NodeT=>NewNodeT):foresight.eqsat.MixedTree[NewNodeT,CallT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/MixedTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/MixedTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/MixedTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/MixedTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/MixedTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/MixedTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/MixedTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/MixedTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/MixedTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/MixedTree.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/MixedTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/MixedTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/MixedTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/MixedTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/MixedTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/MixedTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/MixedTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/MixedTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/MixedTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A mixed tree that can contain both nodes and e-class calls."}, {"name" : "foresight.eqsat.Permutation", "trait" : "foresight\/eqsat\/Permutation.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/Permutation.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/Permutation.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Permutation[Repr]) => Boolean, msg: => Any): Permutation[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Permutation.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Permutation[Repr]) => Boolean): Permutation[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Permutation.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Permutation[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Permutation.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Permutation[Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Permutation.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Permutation[Repr], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/Permutation.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Permutation[Repr], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/Permutation.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/Permutation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/Permutation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/Permutation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/Permutation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/Permutation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/Permutation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/Permutation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Permutation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Permutation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Permutation.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/Permutation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/Permutation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/Permutation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/Permutation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/Permutation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/Permutation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/Permutation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/Permutation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/Permutation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "iterator", "tail" : "(): Iterator[(Slot, Slot)]", "member" : "foresight.eqsat.Permutation.iterator", "link" : "foresight\/eqsat\/Permutation.html#iterator:Iterator[(foresight.eqsat.Slot,foresight.eqsat.Slot)]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(slot: Slot): Slot", "member" : "foresight.eqsat.Permutation.apply", "link" : "foresight\/eqsat\/Permutation.html#apply(slot:foresight.eqsat.Slot):foresight.eqsat.Slot", "kind" : "abstract def"}, {"label" : "inverse", "tail" : "(): Repr", "member" : "foresight.eqsat.Permutation.inverse", "link" : "foresight\/eqsat\/Permutation.html#inverse:Repr", "kind" : "abstract def"}, {"label" : "compose", "tail" : "(other: Repr): Repr", "member" : "foresight.eqsat.Permutation.compose", "link" : "foresight\/eqsat\/Permutation.html#compose(other:Repr):Repr", "kind" : "abstract def"}], "shortDescription" : "A permutation of slots."}, {"name" : "foresight.eqsat.ShapeCall", "shortDescription" : "An e-node that has been decomposed into a shape and a renaming map that assigns argument slots to the shape'snumeric slots.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/ShapeCall.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/ShapeCall.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeCall[NodeT]) => Boolean, msg: => Any): ShapeCall[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ShapeCall.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeCall[NodeT]) => Boolean): ShapeCall[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ShapeCall.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ShapeCall[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ShapeCall.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ShapeCall[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/ShapeCall.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ShapeCall[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/ShapeCall.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ShapeCall[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/ShapeCall.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "renamePartial", "tail" : "(renaming: SlotMap): ShapeCall[NodeT]", "member" : "foresight.eqsat.ShapeCall.renamePartial", "link" : "foresight\/eqsat\/ShapeCall.html#renamePartial(renaming:foresight.eqsat.SlotMap):foresight.eqsat.ShapeCall[NodeT]", "kind" : "def"}, {"label" : "rename", "tail" : "(renaming: SlotMap): ShapeCall[NodeT]", "member" : "foresight.eqsat.ShapeCall.rename", "link" : "foresight\/eqsat\/ShapeCall.html#rename(renaming:foresight.eqsat.SlotMap):foresight.eqsat.ShapeCall[NodeT]", "kind" : "def"}, {"label" : "asNode", "tail" : "(): ENode[NodeT]", "member" : "foresight.eqsat.ShapeCall.asNode", "link" : "foresight\/eqsat\/ShapeCall.html#asNode:foresight.eqsat.ENode[NodeT]", "kind" : "def"}, {"label" : "args", "tail" : "(): Seq[EClassCall]", "member" : "foresight.eqsat.ShapeCall.args", "link" : "foresight\/eqsat\/ShapeCall.html#args:Seq[foresight.eqsat.EClassCall]", "kind" : "def"}, {"label" : "uses", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.ShapeCall.uses", "link" : "foresight\/eqsat\/ShapeCall.html#uses:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "definitions", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.ShapeCall.definitions", "link" : "foresight\/eqsat\/ShapeCall.html#definitions:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "nodeType", "tail" : "(): NodeT", "member" : "foresight.eqsat.ShapeCall.nodeType", "link" : "foresight\/eqsat\/ShapeCall.html#nodeType:NodeT", "kind" : "def"}, {"member" : "foresight.eqsat.ShapeCall#<init>", "error" : "unsupported entity"}, {"label" : "renaming", "tail" : ": SlotMap", "member" : "foresight.eqsat.ShapeCall.renaming", "link" : "foresight\/eqsat\/ShapeCall.html#renaming:foresight.eqsat.SlotMap", "kind" : "val"}, {"label" : "shape", "tail" : ": ENode[NodeT]", "member" : "foresight.eqsat.ShapeCall.shape", "link" : "foresight\/eqsat\/ShapeCall.html#shape:foresight.eqsat.ENode[NodeT]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/ShapeCall.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/ShapeCall.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/ShapeCall.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/ShapeCall.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/ShapeCall.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/ShapeCall.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/ShapeCall.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/ShapeCall.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ShapeCall.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ShapeCall.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/ShapeCall.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/ShapeCall.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/ShapeCall.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/ShapeCall.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/ShapeCall.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/ShapeCall.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/ShapeCall.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/ShapeCall.html", "kind" : "case class"}, {"name" : "foresight.eqsat.Slot", "object" : "foresight\/eqsat\/Slot$.html", "members_object" : [{"label" : "numeric", "tail" : "(n: Int): Slot", "member" : "foresight.eqsat.Slot.numeric", "link" : "foresight\/eqsat\/Slot$.html#numeric(n:Int):foresight.eqsat.Slot", "kind" : "def"}, {"label" : "fresh", "tail" : "(): Slot", "member" : "foresight.eqsat.Slot.fresh", "link" : "foresight\/eqsat\/Slot$.html#fresh():foresight.eqsat.Slot", "kind" : "def"}, {"label" : "UniqueSlot", "tail" : "", "member" : "foresight.eqsat.Slot.UniqueSlot", "link" : "foresight\/eqsat\/Slot$.html#UniqueSlotextendsSlot", "kind" : "final class"}, {"label" : "NumberedSlot", "tail" : "", "member" : "foresight.eqsat.Slot.NumberedSlot", "link" : "foresight\/eqsat\/Slot$.html#NumberedSlotextendsSlotwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/Slot$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/Slot$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/Slot$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/Slot$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/Slot$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/Slot$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/Slot$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Slot$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Slot$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Slot$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/Slot$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/Slot$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/Slot$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/Slot$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/Slot$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/Slot$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/Slot$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/Slot$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/Slot$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/Slot.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/Slot.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/Slot.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Slot) => Boolean, msg: => Any): Slot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Slot.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Slot) => Boolean): Slot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Slot.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Slot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Slot.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Slot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Slot.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Slot, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/Slot.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Slot, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/Slot.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isUnique", "tail" : "(): Boolean", "member" : "foresight.eqsat.Slot.isUnique", "link" : "foresight\/eqsat\/Slot.html#isUnique:Boolean", "kind" : "final def"}, {"label" : "isNumbered", "tail" : "(): Boolean", "member" : "foresight.eqsat.Slot.isNumbered", "link" : "foresight\/eqsat\/Slot.html#isNumbered:Boolean", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(that: Slot): Int", "member" : "scala.math.Ordered.compareTo", "link" : "foresight\/eqsat\/Slot.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: Slot): Boolean", "member" : "scala.math.Ordered.>=", "link" : "foresight\/eqsat\/Slot.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: Slot): Boolean", "member" : "scala.math.Ordered.<=", "link" : "foresight\/eqsat\/Slot.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: Slot): Boolean", "member" : "scala.math.Ordered.>", "link" : "foresight\/eqsat\/Slot.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: Slot): Boolean", "member" : "scala.math.Ordered.<", "link" : "foresight\/eqsat\/Slot.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/Slot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/Slot.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/Slot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/Slot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/Slot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/Slot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/Slot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Slot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Slot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Slot.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/Slot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/Slot.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/Slot.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/Slot.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/Slot.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/Slot.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/Slot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/Slot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/Slot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compare", "tail" : "(that: Slot): Int", "member" : "scala.math.Ordered.compare", "link" : "foresight\/eqsat\/Slot.html#compare(that:A):Int", "kind" : "abstract def"}], "shortDescription" : "A slot in an e-graph."}, {"name" : "foresight.eqsat.SlotMap", "shortDescription" : "A mapping of parameter slots to argument slots.", "object" : "foresight\/eqsat\/SlotMap$.html", "members_object" : [{"label" : "bijectionFromSetToFresh", "tail" : "(set: Set[Slot]): SlotMap", "member" : "foresight.eqsat.SlotMap.bijectionFromSetToFresh", "link" : "foresight\/eqsat\/SlotMap$.html#bijectionFromSetToFresh(set:Set[foresight.eqsat.Slot]):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "identity", "tail" : "(set: Set[Slot]): SlotMap", "member" : "foresight.eqsat.SlotMap.identity", "link" : "foresight\/eqsat\/SlotMap$.html#identity(set:Set[foresight.eqsat.Slot]):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "fromPairs", "tail" : "(pairs: Iterable[(Slot, Slot)]): SlotMap", "member" : "foresight.eqsat.SlotMap.fromPairs", "link" : "foresight\/eqsat\/SlotMap$.html#fromPairs(pairs:Iterable[(foresight.eqsat.Slot,foresight.eqsat.Slot)]):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "empty", "tail" : "(): SlotMap", "member" : "foresight.eqsat.SlotMap.empty", "link" : "foresight\/eqsat\/SlotMap$.html#empty:foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/SlotMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/SlotMap$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/SlotMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/SlotMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/SlotMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/SlotMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/SlotMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/SlotMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/SlotMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/SlotMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/SlotMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/SlotMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/SlotMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/SlotMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/SlotMap$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/SlotMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/SlotMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/SlotMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/SlotMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/SlotMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/SlotMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SlotMap) => Boolean, msg: => Any): SlotMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/SlotMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SlotMap) => Boolean): SlotMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/SlotMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SlotMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/SlotMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SlotMap", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/SlotMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SlotMap, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/SlotMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SlotMap, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/SlotMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "filterKeys", "tail" : "(p: (Slot) => Boolean): SlotMap", "member" : "foresight.eqsat.SlotMap.filterKeys", "link" : "foresight\/eqsat\/SlotMap.html#filterKeys(p:foresight.eqsat.Slot=>Boolean):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "compare", "tail" : "(that: SlotMap): Int", "member" : "foresight.eqsat.SlotMap.compare", "link" : "foresight\/eqsat\/SlotMap.html#compare(that:foresight.eqsat.SlotMap):Int", "kind" : "def"}, {"label" : "apply", "tail" : "(slot: Slot): Slot", "member" : "foresight.eqsat.SlotMap.apply", "link" : "foresight\/eqsat\/SlotMap.html#apply(slot:foresight.eqsat.Slot):foresight.eqsat.Slot", "kind" : "def"}, {"label" : "composeFresh", "tail" : "(other: SlotMap): SlotMap", "member" : "foresight.eqsat.SlotMap.composeFresh", "link" : "foresight\/eqsat\/SlotMap.html#composeFresh(other:foresight.eqsat.SlotMap):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "composeRetain", "tail" : "(other: SlotMap): SlotMap", "member" : "foresight.eqsat.SlotMap.composeRetain", "link" : "foresight\/eqsat\/SlotMap.html#composeRetain(other:foresight.eqsat.SlotMap):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "composePartial", "tail" : "(other: SlotMap): SlotMap", "member" : "foresight.eqsat.SlotMap.composePartial", "link" : "foresight\/eqsat\/SlotMap.html#composePartial(other:foresight.eqsat.SlotMap):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "compose", "tail" : "(other: SlotMap): SlotMap", "member" : "foresight.eqsat.SlotMap.compose", "link" : "foresight\/eqsat\/SlotMap.html#compose(other:foresight.eqsat.SlotMap):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "isPermutation", "tail" : "(): Boolean", "member" : "foresight.eqsat.SlotMap.isPermutation", "link" : "foresight\/eqsat\/SlotMap.html#isPermutation:Boolean", "kind" : "def"}, {"label" : "isBijection", "tail" : "(): Boolean", "member" : "foresight.eqsat.SlotMap.isBijection", "link" : "foresight\/eqsat\/SlotMap.html#isBijection:Boolean", "kind" : "def"}, {"label" : "inverse", "tail" : "(): SlotMap", "member" : "foresight.eqsat.SlotMap.inverse", "link" : "foresight\/eqsat\/SlotMap.html#inverse:foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "valueSet", "tail" : "(): Set[Slot]", "member" : "foresight.eqsat.SlotMap.valueSet", "link" : "foresight\/eqsat\/SlotMap.html#valueSet:Set[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "keySet", "tail" : "(): Set[Slot]", "member" : "foresight.eqsat.SlotMap.keySet", "link" : "foresight\/eqsat\/SlotMap.html#keySet:Set[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "values", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.SlotMap.values", "link" : "foresight\/eqsat\/SlotMap.html#values:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.SlotMap.keys", "link" : "foresight\/eqsat\/SlotMap.html#keys:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[(Slot, Slot)]", "member" : "foresight.eqsat.SlotMap.iterator", "link" : "foresight\/eqsat\/SlotMap.html#iterator:Iterator[(foresight.eqsat.Slot,foresight.eqsat.Slot)]", "kind" : "def"}, {"label" : "get", "tail" : "(k: Slot): Option[Slot]", "member" : "foresight.eqsat.SlotMap.get", "link" : "foresight\/eqsat\/SlotMap.html#get(k:foresight.eqsat.Slot):Option[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "insert", "tail" : "(k: Slot, v: Slot): SlotMap", "member" : "foresight.eqsat.SlotMap.insert", "link" : "foresight\/eqsat\/SlotMap.html#insert(k:foresight.eqsat.Slot,v:foresight.eqsat.Slot):foresight.eqsat.SlotMap", "kind" : "def"}, {"label" : "contains", "tail" : "(k: Slot): Boolean", "member" : "foresight.eqsat.SlotMap.contains", "link" : "foresight\/eqsat\/SlotMap.html#contains(k:foresight.eqsat.Slot):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "foresight.eqsat.SlotMap.isEmpty", "link" : "foresight\/eqsat\/SlotMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "foresight.eqsat.SlotMap.size", "link" : "foresight\/eqsat\/SlotMap.html#size:Int", "kind" : "def"}, {"member" : "foresight.eqsat.SlotMap#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Slot, Slot]", "member" : "foresight.eqsat.SlotMap.map", "link" : "foresight\/eqsat\/SlotMap.html#map:Map[foresight.eqsat.Slot,foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/SlotMap.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "compareTo", "tail" : "(that: SlotMap): Int", "member" : "scala.math.Ordered.compareTo", "link" : "foresight\/eqsat\/SlotMap.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: SlotMap): Boolean", "member" : "scala.math.Ordered.>=", "link" : "foresight\/eqsat\/SlotMap.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: SlotMap): Boolean", "member" : "scala.math.Ordered.<=", "link" : "foresight\/eqsat\/SlotMap.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: SlotMap): Boolean", "member" : "scala.math.Ordered.>", "link" : "foresight\/eqsat\/SlotMap.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: SlotMap): Boolean", "member" : "scala.math.Ordered.<", "link" : "foresight\/eqsat\/SlotMap.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/SlotMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/SlotMap.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/SlotMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/SlotMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/SlotMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/SlotMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/SlotMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/SlotMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/SlotMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/SlotMap.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/SlotMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/SlotMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/SlotMap.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/SlotMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/SlotMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/SlotMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/SlotMap.html", "kind" : "case class"}, {"name" : "foresight.eqsat.Tree", "shortDescription" : "A tree data structure.", "object" : "foresight\/eqsat\/Tree$.html", "members_object" : [{"label" : "unslotted", "tail" : "(nodeType: NodeT, args: Seq[Tree[NodeT]]): Tree[NodeT]", "member" : "foresight.eqsat.Tree.unslotted", "link" : "foresight\/eqsat\/Tree$.html#unslotted[NodeT](nodeType:NodeT,args:Seq[foresight.eqsat.Tree[NodeT]]):foresight.eqsat.Tree[NodeT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/Tree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/Tree$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/Tree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/Tree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/Tree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/Tree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/Tree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Tree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Tree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Tree$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/Tree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/Tree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/Tree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/Tree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/Tree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/Tree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/Tree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/Tree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/Tree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/Tree.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/Tree.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tree[NodeT]) => Boolean, msg: => Any): Tree[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Tree.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Tree[NodeT]) => Boolean): Tree[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Tree.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Tree[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Tree.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Tree[NodeT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/Tree.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Tree[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/Tree.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Tree[NodeT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/Tree.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "map", "tail" : "(f: (NodeT) => NewNodeT): Tree[NewNodeT]", "member" : "foresight.eqsat.Tree.map", "link" : "foresight\/eqsat\/Tree.html#map[NewNodeT](f:NodeT=>NewNodeT):foresight.eqsat.Tree[NewNodeT]", "kind" : "def"}, {"member" : "foresight.eqsat.Tree#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Seq[Tree[NodeT]]", "member" : "foresight.eqsat.Tree.args", "link" : "foresight\/eqsat\/Tree.html#args:Seq[foresight.eqsat.Tree[NodeT]]", "kind" : "val"}, {"label" : "uses", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.Tree.uses", "link" : "foresight\/eqsat\/Tree.html#uses:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "definitions", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.Tree.definitions", "link" : "foresight\/eqsat\/Tree.html#definitions:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "nodeType", "tail" : ": NodeT", "member" : "foresight.eqsat.Tree.nodeType", "link" : "foresight\/eqsat\/Tree.html#nodeType:NodeT", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/Tree.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/Tree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/Tree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/Tree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/Tree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/Tree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/Tree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/Tree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Tree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Tree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/Tree.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/Tree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/Tree.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/Tree.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/Tree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/Tree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/Tree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/Tree.html", "kind" : "case class"}], "foresight.util" : [], "foresight.eqsat.metadata" : [{"name" : "foresight.eqsat.metadata.Analysis", "trait" : "foresight\/eqsat\/metadata\/Analysis.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/metadata\/Analysis.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/metadata\/Analysis.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Analysis[NodeT, A]) => Boolean, msg: => Any): Analysis[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Analysis.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Analysis[NodeT, A]) => Boolean): Analysis[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Analysis.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Analysis[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Analysis.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Analysis[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Analysis.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Analysis[NodeT, A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/metadata\/Analysis.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Analysis[NodeT, A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/metadata\/Analysis.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "get", "tail" : "(egraph: EGraphWithMetadata[NodeT, _]): AnalysisMetadata[NodeT, A]", "member" : "foresight.eqsat.metadata.Analysis.get", "link" : "foresight\/eqsat\/metadata\/Analysis.html#get(egraph:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,_]):foresight.eqsat.metadata.AnalysisMetadata[NodeT,A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraph[NodeT]): AnalysisMetadata[NodeT, A]", "member" : "foresight.eqsat.metadata.Analysis.apply", "link" : "foresight\/eqsat\/metadata\/Analysis.html#apply(egraph:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.metadata.AnalysisMetadata[NodeT,A]", "kind" : "final def"}, {"label" : "make", "tail" : "(node: ENode[NodeT], args: Seq[A]): A", "member" : "foresight.eqsat.metadata.Analysis.make", "link" : "foresight\/eqsat\/metadata\/Analysis.html#make(node:foresight.eqsat.ENode[NodeT],args:Seq[A]):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/metadata\/Analysis.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/metadata\/Analysis.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/metadata\/Analysis.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/metadata\/Analysis.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/metadata\/Analysis.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/metadata\/Analysis.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/metadata\/Analysis.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/Analysis.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/Analysis.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/Analysis.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/metadata\/Analysis.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/metadata\/Analysis.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/metadata\/Analysis.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/metadata\/Analysis.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/metadata\/Analysis.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/metadata\/Analysis.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/metadata\/Analysis.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/metadata\/Analysis.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/metadata\/Analysis.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "join", "tail" : "(left: A, right: A): A", "member" : "foresight.eqsat.metadata.Analysis.join", "link" : "foresight\/eqsat\/metadata\/Analysis.html#join(left:A,right:A):A", "kind" : "abstract def"}, {"label" : "make", "tail" : "(node: NodeT, defs: Seq[Slot], uses: Seq[Slot], args: Seq[A]): A", "member" : "foresight.eqsat.metadata.Analysis.make", "link" : "foresight\/eqsat\/metadata\/Analysis.html#make(node:NodeT,defs:Seq[foresight.eqsat.Slot],uses:Seq[foresight.eqsat.Slot],args:Seq[A]):A", "kind" : "abstract def"}, {"label" : "rename", "tail" : "(result: A, renaming: SlotMap): A", "member" : "foresight.eqsat.metadata.Analysis.rename", "link" : "foresight\/eqsat\/metadata\/Analysis.html#rename(result:A,renaming:foresight.eqsat.SlotMap):A", "kind" : "abstract def"}, {"label" : "name", "tail" : "(): String", "member" : "foresight.eqsat.metadata.Analysis.name", "link" : "foresight\/eqsat\/metadata\/Analysis.html#name:String", "kind" : "abstract def"}], "shortDescription" : "An analysis that can be performed on an e-graph."}, {"name" : "foresight.eqsat.metadata.AnalysisMetadata", "shortDescription" : "Analysis results for an e-graph's classes.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AnalysisMetadata[NodeT, A]) => Boolean, msg: => Any): AnalysisMetadata[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AnalysisMetadata[NodeT, A]) => Boolean): AnalysisMetadata[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): AnalysisMetadata[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AnalysisMetadata[NodeT, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AnalysisMetadata[NodeT, A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AnalysisMetadata[NodeT, A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "emptied", "tail" : "(): Metadata[NodeT, AnalysisMetadata[NodeT, A]]", "member" : "foresight.eqsat.metadata.AnalysisMetadata.emptied", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#emptied:foresight.eqsat.metadata.Metadata[NodeT,foresight.eqsat.metadata.AnalysisMetadata[NodeT,A]]", "kind" : "def"}, {"label" : "onUnionMany", "tail" : "(equivalences: Set[Set[EClassCall]], after: EGraph[NodeT]): AnalysisMetadata[NodeT, A]", "member" : "foresight.eqsat.metadata.AnalysisMetadata.onUnionMany", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#onUnionMany(equivalences:Set[Set[foresight.eqsat.EClassCall]],after:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.metadata.AnalysisMetadata[NodeT,A]", "kind" : "def"}, {"label" : "onAddMany", "tail" : "(added: Seq[(ENode[NodeT], EClassCall)], after: EGraph[NodeT], parallelize: ParallelMap): Metadata[NodeT, AnalysisMetadata[NodeT, A]]", "member" : "foresight.eqsat.metadata.AnalysisMetadata.onAddMany", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#onAddMany(added:Seq[(foresight.eqsat.ENode[NodeT],foresight.eqsat.EClassCall)],after:foresight.eqsat.EGraph[NodeT],parallelize:foresight.eqsat.parallel.ParallelMap):foresight.eqsat.metadata.Metadata[NodeT,foresight.eqsat.metadata.AnalysisMetadata[NodeT,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(tree: MixedTree[NodeT, EClassCall], egraph: EGraph[NodeT]): A", "member" : "foresight.eqsat.metadata.AnalysisMetadata.apply", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#apply(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall],egraph:foresight.eqsat.EGraph[NodeT]):A", "kind" : "def"}, {"label" : "apply", "tail" : "(call: EClassCall, egraph: EGraph[NodeT]): A", "member" : "foresight.eqsat.metadata.AnalysisMetadata.apply", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#apply(call:foresight.eqsat.EClassCall,egraph:foresight.eqsat.EGraph[NodeT]):A", "kind" : "def"}, {"member" : "foresight.eqsat.metadata.AnalysisMetadata#<init>", "error" : "unsupported entity"}, {"label" : "results", "tail" : ": Map[EClassRef, A]", "member" : "foresight.eqsat.metadata.AnalysisMetadata.results", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#results:Map[foresight.eqsat.EClassRef,A]", "kind" : "val"}, {"label" : "analysis", "tail" : ": Analysis[NodeT, A]", "member" : "foresight.eqsat.metadata.AnalysisMetadata.analysis", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#analysis:foresight.eqsat.metadata.Analysis[NodeT,A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/metadata\/AnalysisMetadata.html", "kind" : "case class"}, {"name" : "foresight.eqsat.metadata.EGraphWithMetadata", "shortDescription" : "An e-graph with associated metadata.", "object" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html", "members_object" : [{"label" : "apply", "tail" : "(egraph: Repr): EGraphWithMetadata[NodeT, Repr]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.apply", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#apply[NodeT,Repr<:foresight.eqsat.EGraphLike[NodeT,Repr]withforesight.eqsat.EGraph[NodeT]](egraph:Repr):foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithMetadata[NodeT, Repr]) => Boolean, msg: => Any): EGraphWithMetadata[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithMetadata[NodeT, Repr]) => Boolean): EGraphWithMetadata[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EGraphWithMetadata[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EGraphWithMetadata[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EGraphWithMetadata[NodeT, Repr], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EGraphWithMetadata[NodeT, Repr], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "emptied", "tail" : "(): EGraphWithMetadata[NodeT, Repr]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.emptied", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#emptied:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr]", "kind" : "def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)], parallelize: ParallelMap): (Set[Set[EClassCall]], EGraphWithMetadata[NodeT, Repr])", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.unionMany", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)],parallelize:foresight.eqsat.parallel.ParallelMap):(Set[Set[foresight.eqsat.EClassCall]],foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr])", "kind" : "def"}, {"label" : "tryAddMany", "tail" : "(nodes: Seq[ENode[NodeT]], parallelize: ParallelMap): (Seq[AddNodeResult], EGraphWithMetadata[NodeT, Repr])", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.tryAddMany", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#tryAddMany(nodes:Seq[foresight.eqsat.ENode[NodeT]],parallelize:foresight.eqsat.parallel.ParallelMap):(Seq[foresight.eqsat.AddNodeResult],foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr])", "kind" : "def"}, {"label" : "areSame", "tail" : "(first: EClassCall, second: EClassCall): Boolean", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.areSame", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#areSame(first:foresight.eqsat.EClassCall,second:foresight.eqsat.EClassCall):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(node: ENode[NodeT]): Option[EClassCall]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.find", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#find(node:foresight.eqsat.ENode[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "def"}, {"label" : "users", "tail" : "(ref: EClassRef): Set[ENode[NodeT]]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.users", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#users(ref:foresight.eqsat.EClassRef):Set[foresight.eqsat.ENode[NodeT]]", "kind" : "def"}, {"label" : "nodes", "tail" : "(call: EClassCall): Set[ENode[NodeT]]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.nodes", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#nodes(call:foresight.eqsat.EClassCall):Set[foresight.eqsat.ENode[NodeT]]", "kind" : "def"}, {"label" : "classes", "tail" : "(): Iterable[EClassRef]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.classes", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#classes:Iterable[foresight.eqsat.EClassRef]", "kind" : "def"}, {"label" : "canonicalize", "tail" : "(node: ENode[NodeT]): ShapeCall[NodeT]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.canonicalize", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#canonicalize(node:foresight.eqsat.ENode[NodeT]):foresight.eqsat.ShapeCall[NodeT]", "kind" : "def"}, {"label" : "tryCanonicalize", "tail" : "(ref: EClassRef): Option[EClassCall]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.tryCanonicalize", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#tryCanonicalize(ref:foresight.eqsat.EClassRef):Option[foresight.eqsat.EClassCall]", "kind" : "def"}, {"label" : "getMetadata", "tail" : "(name: String): MetadataManagerT", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.getMetadata", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#getMetadata[MetadataManagerT<:foresight.eqsat.metadata.Metadata[NodeT,_]](name:String):MetadataManagerT", "kind" : "def"}, {"label" : "removeMetadata", "tail" : "(name: String): EGraphWithMetadata[NodeT, Repr]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.removeMetadata", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#removeMetadata(name:String):foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr]", "kind" : "def"}, {"label" : "addAnalysis", "tail" : "(analysis: Analysis[NodeT, A]): EGraphWithMetadata[NodeT, Repr]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.addAnalysis", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#addAnalysis[A](analysis:foresight.eqsat.metadata.Analysis[NodeT,A]):foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr]", "kind" : "def"}, {"label" : "addMetadata", "tail" : "(name: String, metadata: Metadata[NodeT, MetadataT]): EGraphWithMetadata[NodeT, Repr]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.addMetadata", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#addMetadata[MetadataT](name:String,metadata:foresight.eqsat.metadata.Metadata[NodeT,MetadataT]):foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr]", "kind" : "def"}, {"label" : "migrateTo", "tail" : "(newRepr: Repr2): EGraphWithMetadata[NodeT, Repr2]", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.migrateTo", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#migrateTo[Repr2<:foresight.eqsat.EGraphLike[NodeT,Repr2]withforesight.eqsat.EGraph[NodeT]](newRepr:Repr2):foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr2]", "kind" : "def"}, {"label" : "egraph", "tail" : ": Repr", "member" : "foresight.eqsat.metadata.EGraphWithMetadata.egraph", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#egraph:Repr", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(): EGraphWithMetadata[NodeT, EGraphWithMetadata[NodeT, Repr]]", "member" : "foresight.eqsat.EGraphLike.withMetadata", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#withMetadata:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,This]", "kind" : "final def"}, {"label" : "union", "tail" : "(left: EClassCall, right: EClassCall): EGraphWithPendingUnions[EGraphWithMetadata[NodeT, Repr]]", "member" : "foresight.eqsat.EGraphLike.union", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#union(left:foresight.eqsat.EClassCall,right:foresight.eqsat.EClassCall):foresight.eqsat.EGraphWithPendingUnions[This]", "kind" : "final def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)]): (Set[Set[EClassCall]], EGraphWithMetadata[NodeT, Repr])", "member" : "foresight.eqsat.EGraphLike.unionMany", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)]):(Set[Set[foresight.eqsat.EClassCall]],This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: Tree[NodeT]): (EClassCall, EGraphWithMetadata[NodeT, Repr])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#add(tree:foresight.eqsat.Tree[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: MixedTree[NodeT, EClassCall]): (EClassCall, EGraphWithMetadata[NodeT, Repr])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#add(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(node: ENode[NodeT]): (EClassCall, EGraphWithMetadata[NodeT, Repr])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#add(node:foresight.eqsat.ENode[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: Tree[NodeT]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#find(tree:foresight.eqsat.Tree[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: MixedTree[NodeT, EClassCall]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#find(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: Tree[NodeT]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#contains(tree:foresight.eqsat.Tree[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: MixedTree[NodeT, EClassCall]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#contains(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(node: ENode[NodeT]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#contains(node:foresight.eqsat.ENode[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(ref: EClassRef): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#contains(ref:foresight.eqsat.EClassRef):Boolean", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(call: EClassCall): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#canonicalize(call:foresight.eqsat.EClassCall):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(ref: EClassRef): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#canonicalize(ref:foresight.eqsat.EClassRef):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "nodeCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.nodeCount", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#nodeCount:Int", "kind" : "final def"}, {"label" : "classCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.classCount", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#classCount:Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/metadata\/EGraphWithMetadata.html", "kind" : "case class"}, {"name" : "foresight.eqsat.metadata.Metadata", "trait" : "foresight\/eqsat\/metadata\/Metadata.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/metadata\/Metadata.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/metadata\/Metadata.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Metadata[NodeT, MetadataT]) => Boolean, msg: => Any): Metadata[NodeT, MetadataT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Metadata.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Metadata[NodeT, MetadataT]) => Boolean): Metadata[NodeT, MetadataT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Metadata.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Metadata[NodeT, MetadataT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Metadata.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Metadata[NodeT, MetadataT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/metadata\/Metadata.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Metadata[NodeT, MetadataT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/metadata\/Metadata.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Metadata[NodeT, MetadataT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/metadata\/Metadata.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/metadata\/Metadata.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/metadata\/Metadata.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/metadata\/Metadata.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/metadata\/Metadata.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/metadata\/Metadata.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/metadata\/Metadata.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/metadata\/Metadata.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/Metadata.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/Metadata.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/metadata\/Metadata.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/metadata\/Metadata.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/metadata\/Metadata.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/metadata\/Metadata.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/metadata\/Metadata.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/metadata\/Metadata.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/metadata\/Metadata.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/metadata\/Metadata.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/metadata\/Metadata.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/metadata\/Metadata.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "emptied", "tail" : "(): Metadata[NodeT, MetadataT]", "member" : "foresight.eqsat.metadata.Metadata.emptied", "link" : "foresight\/eqsat\/metadata\/Metadata.html#emptied:foresight.eqsat.metadata.Metadata[NodeT,MetadataT]", "kind" : "abstract def"}, {"label" : "onUnionMany", "tail" : "(equivalences: Set[Set[EClassCall]], after: EGraph[NodeT]): Metadata[NodeT, MetadataT]", "member" : "foresight.eqsat.metadata.Metadata.onUnionMany", "link" : "foresight\/eqsat\/metadata\/Metadata.html#onUnionMany(equivalences:Set[Set[foresight.eqsat.EClassCall]],after:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.metadata.Metadata[NodeT,MetadataT]", "kind" : "abstract def"}, {"label" : "onAddMany", "tail" : "(added: Seq[(ENode[NodeT], EClassCall)], after: EGraph[NodeT], parallelize: ParallelMap): Metadata[NodeT, MetadataT]", "member" : "foresight.eqsat.metadata.Metadata.onAddMany", "link" : "foresight\/eqsat\/metadata\/Metadata.html#onAddMany(added:Seq[(foresight.eqsat.ENode[NodeT],foresight.eqsat.EClassCall)],after:foresight.eqsat.EGraph[NodeT],parallelize:foresight.eqsat.parallel.ParallelMap):foresight.eqsat.metadata.Metadata[NodeT,MetadataT]", "kind" : "abstract def"}], "shortDescription" : "Metadata associated with an e-graph's nodes or classes."}], "foresight.util.ordering" : [{"name" : "foresight.util.ordering.SeqOrdering", "shortDescription" : "", "object" : "foresight\/util\/ordering\/SeqOrdering$.html", "members_object" : [{"label" : "lexOrdering", "tail" : "(ord: Ordering[A]): Ordering[Seq[A]]", "member" : "foresight.util.ordering.SeqOrdering.lexOrdering", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#lexOrdering[A](implicitord:Ordering[A]):Ordering[Seq[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/util\/ordering\/SeqOrdering$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/util\/ordering\/SeqOrdering$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "foresight.eqsat.extraction" : [{"name" : "foresight.eqsat.extraction.CostFunction", "trait" : "foresight\/eqsat\/extraction\/CostFunction.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CostFunction[NodeT, C]) => Boolean, msg: => Any): CostFunction[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CostFunction[NodeT, C]) => Boolean): CostFunction[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): CostFunction[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CostFunction[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CostFunction[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CostFunction[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(tree: Tree[NodeT]): C", "member" : "foresight.eqsat.extraction.CostFunction.apply", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#apply(tree:foresight.eqsat.Tree[NodeT]):C", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/extraction\/CostFunction.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(nodeType: NodeT, definitions: Seq[Slot], uses: Seq[Slot], args: Seq[ExtractionTreeCall[NodeT, C]]): C", "member" : "foresight.eqsat.extraction.CostFunction.apply", "link" : "foresight\/eqsat\/extraction\/CostFunction.html#apply(nodeType:NodeT,definitions:Seq[foresight.eqsat.Slot],uses:Seq[foresight.eqsat.Slot],args:Seq[foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]]):C", "kind" : "abstract def"}], "shortDescription" : "A cost function for extraction analyses."}, {"name" : "foresight.eqsat.extraction.ExtractionAnalysis", "shortDescription" : "An analysis that produces extraction trees with minimal cost.", "object" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html", "members_object" : [{"label" : "shallowest", "tail" : "(nodeOrdering: Ordering[NodeT]): ExtractionAnalysis[NodeT, Int]", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.shallowest", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#shallowest[NodeT](implicitnodeOrdering:Ordering[NodeT]):foresight.eqsat.extraction.ExtractionAnalysis[NodeT,Int]", "kind" : "def"}, {"label" : "smallest", "tail" : "(nodeOrdering: Ordering[NodeT]): ExtractionAnalysis[NodeT, Int]", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.smallest", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#smallest[NodeT](implicitnodeOrdering:Ordering[NodeT]):foresight.eqsat.extraction.ExtractionAnalysis[NodeT,Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionAnalysis[NodeT, C]) => Boolean, msg: => Any): ExtractionAnalysis[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionAnalysis[NodeT, C]) => Boolean): ExtractionAnalysis[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ExtractionAnalysis[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExtractionAnalysis[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExtractionAnalysis[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExtractionAnalysis[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "join", "tail" : "(left: ExtractionTreeCall[NodeT, C], right: ExtractionTreeCall[NodeT, C]): ExtractionTreeCall[NodeT, C]", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.join", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#join(left:foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C],right:foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]):foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]", "kind" : "def"}, {"label" : "make", "tail" : "(node: NodeT, defs: Seq[Slot], uses: Seq[Slot], args: Seq[ExtractionTreeCall[NodeT, C]]): ExtractionTreeCall[NodeT, C]", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.make", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#make(node:NodeT,defs:Seq[foresight.eqsat.Slot],uses:Seq[foresight.eqsat.Slot],args:Seq[foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]]):foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]", "kind" : "def"}, {"label" : "rename", "tail" : "(result: ExtractionTreeCall[NodeT, C], renaming: SlotMap): ExtractionTreeCall[NodeT, C]", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.rename", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#rename(result:foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C],renaming:foresight.eqsat.SlotMap):foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]", "kind" : "def"}, {"label" : "extractor", "tail" : "(): Extractor[NodeT, EGraphWithMetadata[NodeT, Repr]]", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.extractor", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#extractor[Repr<:foresight.eqsat.EGraphLike[NodeT,Repr]withforesight.eqsat.EGraph[NodeT]]:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,Repr]]", "kind" : "def"}, {"member" : "foresight.eqsat.extraction.ExtractionAnalysis#<init>", "error" : "unsupported entity"}, {"label" : "cost", "tail" : ": CostFunction[NodeT, C]", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.cost", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#cost:foresight.eqsat.extraction.CostFunction[NodeT,C]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "foresight.eqsat.extraction.ExtractionAnalysis.name", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "get", "tail" : "(egraph: EGraphWithMetadata[NodeT, _]): AnalysisMetadata[NodeT, ExtractionTreeCall[NodeT, C]]", "member" : "foresight.eqsat.metadata.Analysis.get", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#get(egraph:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,_]):foresight.eqsat.metadata.AnalysisMetadata[NodeT,A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraph[NodeT]): AnalysisMetadata[NodeT, ExtractionTreeCall[NodeT, C]]", "member" : "foresight.eqsat.metadata.Analysis.apply", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#apply(egraph:foresight.eqsat.EGraph[NodeT]):foresight.eqsat.metadata.AnalysisMetadata[NodeT,A]", "kind" : "final def"}, {"label" : "make", "tail" : "(node: ENode[NodeT], args: Seq[ExtractionTreeCall[NodeT, C]]): ExtractionTreeCall[NodeT, C]", "member" : "foresight.eqsat.metadata.Analysis.make", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#make(node:foresight.eqsat.ENode[NodeT],args:Seq[A]):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/extraction\/ExtractionAnalysis.html", "kind" : "case class"}, {"name" : "foresight.eqsat.extraction.ExtractionTree", "shortDescription" : "A tree data structure for extraction.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionTree[NodeT, C]) => Boolean, msg: => Any): ExtractionTree[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionTree[NodeT, C]) => Boolean): ExtractionTree[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ExtractionTree[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExtractionTree[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExtractionTree[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExtractionTree[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toTree", "tail" : "(): Tree[NodeT]", "member" : "foresight.eqsat.extraction.ExtractionTree.toTree", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#toTree:foresight.eqsat.Tree[NodeT]", "kind" : "def"}, {"label" : "slotSet", "tail" : ": Set[Slot]", "member" : "foresight.eqsat.extraction.ExtractionTree.slotSet", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#slotSet:Set[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "slots", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.extraction.ExtractionTree.slots", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#slots:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "depth", "tail" : ": Int", "member" : "foresight.eqsat.extraction.ExtractionTree.depth", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#depth:Int", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "foresight.eqsat.extraction.ExtractionTree.size", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#size:Int", "kind" : "val"}, {"member" : "foresight.eqsat.extraction.ExtractionTree#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Seq[ExtractionTreeCall[NodeT, C]]", "member" : "foresight.eqsat.extraction.ExtractionTree.args", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#args:Seq[foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]]", "kind" : "val"}, {"label" : "uses", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.extraction.ExtractionTree.uses", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#uses:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "definitions", "tail" : ": Seq[Slot]", "member" : "foresight.eqsat.extraction.ExtractionTree.definitions", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#definitions:Seq[foresight.eqsat.Slot]", "kind" : "val"}, {"label" : "nodeType", "tail" : ": NodeT", "member" : "foresight.eqsat.extraction.ExtractionTree.nodeType", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#nodeType:NodeT", "kind" : "val"}, {"label" : "cost", "tail" : ": C", "member" : "foresight.eqsat.extraction.ExtractionTree.cost", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#cost:C", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/extraction\/ExtractionTree.html", "kind" : "case class"}, {"name" : "foresight.eqsat.extraction.ExtractionTreeCall", "shortDescription" : "A renamed extraction tree.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionTreeCall[NodeT, C]) => Boolean, msg: => Any): ExtractionTreeCall[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionTreeCall[NodeT, C]) => Boolean): ExtractionTreeCall[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ExtractionTreeCall[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExtractionTreeCall[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExtractionTreeCall[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExtractionTreeCall[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "applied", "tail" : "(): ExtractionTree[NodeT, C]", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.applied", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#applied:foresight.eqsat.extraction.ExtractionTree[NodeT,C]", "kind" : "def"}, {"label" : "rename", "tail" : "(renaming: SlotMap): ExtractionTreeCall[NodeT, C]", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.rename", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#rename(renaming:foresight.eqsat.SlotMap):foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]", "kind" : "def"}, {"label" : "slotSet", "tail" : "(): Set[Slot]", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.slotSet", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#slotSet:Set[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "slots", "tail" : "(): Seq[Slot]", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.slots", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#slots:Seq[foresight.eqsat.Slot]", "kind" : "def"}, {"label" : "depth", "tail" : "(): Int", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.depth", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#depth:Int", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.size", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#size:Int", "kind" : "def"}, {"label" : "cost", "tail" : "(): C", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.cost", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#cost:C", "kind" : "def"}, {"member" : "foresight.eqsat.extraction.ExtractionTreeCall#<init>", "error" : "unsupported entity"}, {"label" : "renaming", "tail" : ": SlotMap", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.renaming", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#renaming:foresight.eqsat.SlotMap", "kind" : "val"}, {"label" : "tree", "tail" : ": ExtractionTree[NodeT, C]", "member" : "foresight.eqsat.extraction.ExtractionTreeCall.tree", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#tree:foresight.eqsat.extraction.ExtractionTree[NodeT,C]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/extraction\/ExtractionTreeCall.html", "kind" : "case class"}, {"name" : "foresight.eqsat.extraction.ExtractionTreeOrdering", "shortDescription" : "An ordering for extraction trees.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionTreeOrdering[NodeT, C]) => Boolean, msg: => Any): ExtractionTreeOrdering[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExtractionTreeOrdering[NodeT, C]) => Boolean): ExtractionTreeOrdering[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ExtractionTreeOrdering[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExtractionTreeOrdering[NodeT, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExtractionTreeOrdering[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExtractionTreeOrdering[NodeT, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "OrderingOps", "tail" : "", "member" : "scala.math.Ordering.OrderingOps", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#OrderingOpsextendsAnyRef", "kind" : "class"}, {"label" : "callOrdering", "tail" : ": Ordering[ExtractionTreeCall[NodeT, C]]", "member" : "foresight.eqsat.extraction.ExtractionTreeOrdering.callOrdering", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#callOrdering:Ordering[foresight.eqsat.extraction.ExtractionTreeCall[NodeT,C]]", "kind" : "implicit val"}, {"label" : "compare", "tail" : "(x: ExtractionTree[NodeT, C], y: ExtractionTree[NodeT, C]): Int", "member" : "foresight.eqsat.extraction.ExtractionTreeOrdering.compare", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#compare(x:foresight.eqsat.extraction.ExtractionTree[NodeT,C],y:foresight.eqsat.extraction.ExtractionTree[NodeT,C]):Int", "kind" : "def"}, {"member" : "foresight.eqsat.extraction.ExtractionTreeOrdering#<init>", "error" : "unsupported entity"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "mkOrderingOps", "tail" : "(lhs: ExtractionTree[NodeT, C]): OrderingOps", "member" : "scala.math.Ordering.mkOrderingOps", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#mkOrderingOps(lhs:T):Ordering.this.OrderingOps", "kind" : "implicit def"}, {"label" : "orElseBy", "tail" : "(f: (ExtractionTree[NodeT, C]) => S)(ord: Ordering[S]): Ordering[ExtractionTree[NodeT, C]]", "member" : "scala.math.Ordering.orElseBy", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#orElseBy[S](f:T=>S)(implicitord:scala.math.Ordering[S]):scala.math.Ordering[T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(other: Ordering[ExtractionTree[NodeT, C]]): Ordering[ExtractionTree[NodeT, C]]", "member" : "scala.math.Ordering.orElse", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#orElse(other:scala.math.Ordering[T]):scala.math.Ordering[T]", "kind" : "def"}, {"label" : "on", "tail" : "(f: (U) => ExtractionTree[NodeT, C]): Ordering[U]", "member" : "scala.math.Ordering.on", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#on[U](f:U=>T):scala.math.Ordering[U]", "kind" : "def"}, {"label" : "isReverseOf", "tail" : "(other: Ordering[_]): Boolean", "member" : "scala.math.Ordering.isReverseOf", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#isReverseOf(other:scala.math.Ordering[_]):Boolean", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Ordering[ExtractionTree[NodeT, C]]", "member" : "scala.math.Ordering.reverse", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#reverse:scala.math.Ordering[T]", "kind" : "def"}, {"label" : "min", "tail" : "(x: U, y: U): U", "member" : "scala.math.Ordering.min", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#min[U<:T](x:U,y:U):U", "kind" : "def"}, {"label" : "max", "tail" : "(x: U, y: U): U", "member" : "scala.math.Ordering.max", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#max[U<:T](x:U,y:U):U", "kind" : "def"}, {"label" : "equiv", "tail" : "(x: ExtractionTree[NodeT, C], y: ExtractionTree[NodeT, C]): Boolean", "member" : "scala.math.Ordering.equiv", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#equiv(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(x: ExtractionTree[NodeT, C], y: ExtractionTree[NodeT, C]): Boolean", "member" : "scala.math.Ordering.gt", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#gt(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: ExtractionTree[NodeT, C], y: ExtractionTree[NodeT, C]): Boolean", "member" : "scala.math.Ordering.lt", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#lt(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "gteq", "tail" : "(x: ExtractionTree[NodeT, C], y: ExtractionTree[NodeT, C]): Boolean", "member" : "scala.math.Ordering.gteq", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#gteq(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "lteq", "tail" : "(x: ExtractionTree[NodeT, C], y: ExtractionTree[NodeT, C]): Boolean", "member" : "scala.math.Ordering.lteq", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#lteq(x:T,y:T):Boolean", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: ExtractionTree[NodeT, C], y: ExtractionTree[NodeT, C]): Some[Int]", "member" : "scala.math.Ordering.tryCompare", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#tryCompare(x:T,y:T):Some[Int]", "kind" : "def"}, {"label" : "thenComparingDouble", "tail" : "(arg0: ToDoubleFunction[_ >: ExtractionTree[NodeT, C] <: AnyRef]): Comparator[ExtractionTree[NodeT, C]]", "member" : "java.util.Comparator.thenComparingDouble", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#thenComparingDouble(x$1:java.util.function.ToDoubleFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingLong", "tail" : "(arg0: ToLongFunction[_ >: ExtractionTree[NodeT, C] <: AnyRef]): Comparator[ExtractionTree[NodeT, C]]", "member" : "java.util.Comparator.thenComparingLong", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#thenComparingLong(x$1:java.util.function.ToLongFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparingInt", "tail" : "(arg0: ToIntFunction[_ >: ExtractionTree[NodeT, C] <: AnyRef]): Comparator[ExtractionTree[NodeT, C]]", "member" : "java.util.Comparator.thenComparingInt", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#thenComparingInt(x$1:java.util.function.ToIntFunction[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: ExtractionTree[NodeT, C] <: AnyRef, _ <: U]): Comparator[ExtractionTree[NodeT, C]]", "member" : "java.util.Comparator.thenComparing", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#thenComparing[U<:Comparable[_>:U]](x$1:java.util.function.Function[_>:T,_<:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Function[_ >: ExtractionTree[NodeT, C] <: AnyRef, _ <: U], arg1: Comparator[_ >: U <: AnyRef]): Comparator[ExtractionTree[NodeT, C]]", "member" : "java.util.Comparator.thenComparing", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#thenComparing[U](x$1:java.util.function.Function[_>:T,_<:U],x$2:java.util.Comparator[_>:U]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "thenComparing", "tail" : "(arg0: Comparator[_ >: ExtractionTree[NodeT, C] <: AnyRef]): Comparator[ExtractionTree[NodeT, C]]", "member" : "java.util.Comparator.thenComparing", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#thenComparing(x$1:java.util.Comparator[_>:T]):java.util.Comparator[T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Comparator[ExtractionTree[NodeT, C]]", "member" : "java.util.Comparator.reversed", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#reversed():java.util.Comparator[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/extraction\/ExtractionTreeOrdering.html", "kind" : "case class"}, {"name" : "foresight.eqsat.extraction.Extractor", "trait" : "foresight\/eqsat\/extraction\/Extractor.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/extraction\/Extractor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/extraction\/Extractor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Extractor[NodeT, Repr]) => Boolean, msg: => Any): Extractor[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/Extractor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Extractor[NodeT, Repr]) => Boolean): Extractor[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/Extractor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Extractor[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/Extractor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Extractor[NodeT, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/extraction\/Extractor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Extractor[NodeT, Repr], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/extraction\/Extractor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Extractor[NodeT, Repr], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/extraction\/Extractor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(tree: MixedTree[NodeT, EClassCall], egraph: Repr): Tree[NodeT]", "member" : "foresight.eqsat.extraction.Extractor.apply", "link" : "foresight\/eqsat\/extraction\/Extractor.html#apply(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall],egraph:Repr):foresight.eqsat.Tree[NodeT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/extraction\/Extractor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/extraction\/Extractor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/extraction\/Extractor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/extraction\/Extractor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/extraction\/Extractor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/extraction\/Extractor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/extraction\/Extractor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/Extractor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/Extractor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/extraction\/Extractor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/extraction\/Extractor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/extraction\/Extractor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/extraction\/Extractor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/extraction\/Extractor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/extraction\/Extractor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/extraction\/Extractor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/extraction\/Extractor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/extraction\/Extractor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/extraction\/Extractor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(call: EClassCall, egraph: Repr): Tree[NodeT]", "member" : "foresight.eqsat.extraction.Extractor.apply", "link" : "foresight\/eqsat\/extraction\/Extractor.html#apply(call:foresight.eqsat.EClassCall,egraph:Repr):foresight.eqsat.Tree[NodeT]", "kind" : "abstract def"}], "shortDescription" : "An extractor that extract expression trees from e-class calls."}], "foresight.util.collections" : [{"name" : "foresight.util.collections.StrictMapOps", "shortDescription" : "Provides strict operations for maps, ensuring that operations do not allow for lazy evaluation.", "object" : "foresight\/util\/collections\/StrictMapOps$.html", "members_object" : [{"label" : "Ops", "tail" : "", "member" : "foresight.util.collections.StrictMapOps.Ops", "link" : "foresight\/util\/collections\/StrictMapOps$.html#Ops[K,V]extendsAnyVal", "kind" : "final class"}, {"label" : "toStrictMapOps", "tail" : "(m: Map[K, V]): Ops[K, V]", "member" : "foresight.util.collections.StrictMapOps.toStrictMapOps", "link" : "foresight\/util\/collections\/StrictMapOps$.html#toStrictMapOps[K,V](m:Map[K,V]):foresight.util.collections.StrictMapOps.Ops[K,V]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/util\/collections\/StrictMapOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/util\/collections\/StrictMapOps$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/util\/collections\/StrictMapOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/util\/collections\/StrictMapOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/util\/collections\/StrictMapOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/util\/collections\/StrictMapOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/util\/collections\/StrictMapOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/collections\/StrictMapOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/collections\/StrictMapOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/collections\/StrictMapOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/util\/collections\/StrictMapOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/util\/collections\/StrictMapOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/util\/collections\/StrictMapOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/util\/collections\/StrictMapOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/util\/collections\/StrictMapOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/util\/collections\/StrictMapOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/util\/collections\/StrictMapOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/util\/collections\/StrictMapOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/util\/collections\/StrictMapOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "foresight.eqsat.rewriting" : [{"name" : "foresight.eqsat.rewriting.Applier", "object" : "foresight\/eqsat\/rewriting\/Applier$.html", "members_object" : [{"label" : "ApplierOps", "tail" : "", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#ApplierOps[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "FlatMap", "tail" : "", "member" : "foresight.eqsat.rewriting.Applier.FlatMap", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#FlatMap[NodeT,MatchT1,MatchT2,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsApplier[NodeT,MatchT1,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Map", "tail" : "", "member" : "foresight.eqsat.rewriting.Applier.Map", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#Map[NodeT,MatchT1,MatchT2,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsApplier[NodeT,MatchT1,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Filter", "tail" : "", "member" : "foresight.eqsat.rewriting.Applier.Filter", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#Filter[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsReversibleApplier[NodeT,MatchT,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ignore", "tail" : "(): Applier[NodeT, MatchT, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ignore", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#ignore[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]:foresight.eqsat.rewriting.Applier[NodeT,MatchT,EGraphT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/Applier$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Applier$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/rewriting\/Applier.html", "kind" : "trait", "members_trait" : [{"label" : "flatMap", "tail" : "(f: (MatchT2, EGraphT) => Iterable[MatchT]): Applier[NodeT, MatchT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.flatMap", "link" : "foresight\/eqsat\/rewriting\/Applier.html#flatMap[MatchT2](f:(MatchT2,EGraphT)=>Iterable[MatchT]):foresight.eqsat.rewriting.Applier[NodeT,MatchT2,EGraphT]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (MatchT2, EGraphT) => MatchT): Applier[NodeT, MatchT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.map", "link" : "foresight\/eqsat\/rewriting\/Applier.html#map[MatchT2](f:(MatchT2,EGraphT)=>MatchT):foresight.eqsat.rewriting.Applier[NodeT,MatchT2,EGraphT]", "kind" : "def"}, {"label" : "filter", "tail" : "(filter: (MatchT, EGraphT) => Boolean): Applier[NodeT, MatchT, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.filter", "link" : "foresight\/eqsat\/rewriting\/Applier.html#filter(filter:(MatchT,EGraphT)=>Boolean):foresight.eqsat.rewriting.Applier[NodeT,MatchT,EGraphT]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/Applier.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/Applier.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Applier[NodeT, MatchT, EGraphT]) => Boolean, msg: => Any): Applier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Applier.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Applier[NodeT, MatchT, EGraphT]) => Boolean): Applier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Applier.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Applier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Applier.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Applier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Applier.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Applier[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/Applier.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Applier[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/Applier.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/Applier.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/Applier.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/Applier.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/Applier.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/Applier.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/Applier.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/Applier.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Applier.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Applier.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Applier.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/Applier.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/Applier.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/Applier.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/Applier.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/Applier.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/Applier.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/Applier.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Applier.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Applier.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(m: MatchT, egraph: EGraphT): Command[NodeT]", "member" : "foresight.eqsat.rewriting.Applier.apply", "link" : "foresight\/eqsat\/rewriting\/Applier.html#apply(m:MatchT,egraph:EGraphT):foresight.eqsat.commands.Command[NodeT]", "kind" : "abstract def"}], "shortDescription" : "An applier that applies a match to an e-graph."}, {"name" : "foresight.eqsat.rewriting.PortableMatch", "trait" : "foresight\/eqsat\/rewriting\/PortableMatch.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PortableMatch[NodeT, This]) => Boolean, msg: => Any): PortableMatch[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PortableMatch[NodeT, This]) => Boolean): PortableMatch[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PortableMatch[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PortableMatch[NodeT, This]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PortableMatch[NodeT, This], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PortableMatch[NodeT, This], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "port", "tail" : "(egraph: EGraph[NodeT]): This", "member" : "foresight.eqsat.rewriting.PortableMatch.port", "link" : "foresight\/eqsat\/rewriting\/PortableMatch.html#port(egraph:foresight.eqsat.EGraph[NodeT]):This", "kind" : "abstract def"}], "shortDescription" : "A match that can be updated to be portable to e-graphs derived from the original e-graph in which the match wasfound."}, {"name" : "foresight.eqsat.rewriting.ReversibleApplier", "trait" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html", "kind" : "trait", "members_trait" : [{"label" : "flatMap", "tail" : "(f: (MatchT2, EGraphT) => Iterable[MatchT]): Applier[NodeT, MatchT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.flatMap", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#flatMap[MatchT2](f:(MatchT2,EGraphT)=>Iterable[MatchT]):foresight.eqsat.rewriting.Applier[NodeT,MatchT2,EGraphT]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (MatchT2, EGraphT) => MatchT): Applier[NodeT, MatchT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.map", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#map[MatchT2](f:(MatchT2,EGraphT)=>MatchT):foresight.eqsat.rewriting.Applier[NodeT,MatchT2,EGraphT]", "kind" : "def"}, {"label" : "filter", "tail" : "(filter: (MatchT, EGraphT) => Boolean): Applier[NodeT, MatchT, EGraphT]", "member" : "foresight.eqsat.rewriting.Applier.ApplierOps.filter", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#filter(filter:(MatchT,EGraphT)=>Boolean):foresight.eqsat.rewriting.Applier[NodeT,MatchT,EGraphT]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReversibleApplier[NodeT, MatchT, EGraphT]) => Boolean, msg: => Any): ReversibleApplier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReversibleApplier[NodeT, MatchT, EGraphT]) => Boolean): ReversibleApplier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ReversibleApplier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReversibleApplier[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReversibleApplier[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReversibleApplier[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryReverse", "tail" : "(): Option[Searcher[NodeT, Seq[MatchT], EGraphT]]", "member" : "foresight.eqsat.rewriting.ReversibleApplier.tryReverse", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#tryReverse:Option[foresight.eqsat.rewriting.Searcher[NodeT,Seq[MatchT],EGraphT]]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(m: MatchT, egraph: EGraphT): Command[NodeT]", "member" : "foresight.eqsat.rewriting.Applier.apply", "link" : "foresight\/eqsat\/rewriting\/ReversibleApplier.html#apply(m:MatchT,egraph:EGraphT):foresight.eqsat.commands.Command[NodeT]", "kind" : "abstract def"}], "shortDescription" : "An applier that can be reversed into a searcher."}, {"name" : "foresight.eqsat.rewriting.ReversibleSearcher", "object" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html", "members_object" : [{"label" : "apply", "tail" : "(phase: ReversibleSearcherPhase[NodeT, Unit, _, MatchT, EGraphT]): ReversibleSearcher[NodeT, MatchT, EGraphT]", "member" : "foresight.eqsat.rewriting.ReversibleSearcher.apply", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#apply[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]](phase:foresight.eqsat.rewriting.ReversibleSearcherPhase[NodeT,Unit,_,MatchT,EGraphT]):foresight.eqsat.rewriting.ReversibleSearcher[NodeT,MatchT,EGraphT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html", "kind" : "trait", "members_trait" : [{"label" : "requireIndependent", "tail" : "(expr: Var[NodeT], slots: Slot*): Searcher[NodeT, Seq[PatternMatch[NodeT]], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfPatternMatch.requireIndependent", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#requireIndependent(expr:foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT],slots:foresight.eqsat.Slot*):foresight.eqsat.rewriting.Searcher[NodeT,Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]],EGraphT]", "kind" : "def"}, {"label" : "flatten", "tail" : "(): Searcher[NodeT, Seq[MatchT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOfTraversableOps.flatten", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#flatten:foresight.eqsat.rewriting.Searcher[NodeT,Seq[MatchT],EGraphT]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (MatchT, EGraphT) => Iterable[OutputT]): Searcher[NodeT, Seq[OutputT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOps.flatMap", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#flatMap[OutputT](f:(MatchT,EGraphT)=>Iterable[OutputT]):foresight.eqsat.rewriting.Searcher[NodeT,Seq[OutputT],EGraphT]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (MatchT, EGraphT) => OutputT): Searcher[NodeT, Seq[OutputT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOps.map", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#map[OutputT](f:(MatchT,EGraphT)=>OutputT):foresight.eqsat.rewriting.Searcher[NodeT,Seq[OutputT],EGraphT]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (MatchT, EGraphT) => Boolean): Searcher[NodeT, Seq[MatchT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOps.filter", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#filter(f:(MatchT,EGraphT)=>Boolean):foresight.eqsat.rewriting.Searcher[NodeT,Seq[MatchT],EGraphT]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReversibleSearcher[NodeT, MatchT, EGraphT]) => Boolean, msg: => Any): ReversibleSearcher[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReversibleSearcher[NodeT, MatchT, EGraphT]) => Boolean): ReversibleSearcher[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ReversibleSearcher[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReversibleSearcher[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReversibleSearcher[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReversibleSearcher[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "requireRoot", "tail" : "(): Searcher[NodeT, Seq[MatchT], EGraphWithRoot[NodeT, EGraphT]]", "member" : "foresight.eqsat.rewriting.Searcher.requireRoot", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#requireRoot:foresight.eqsat.rewriting.Searcher[NodeT,OutputT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]", "kind" : "final def"}, {"label" : "requireMetadata", "tail" : "(): Searcher[NodeT, Seq[MatchT], EGraphWithMetadata[NodeT, EGraphT]]", "member" : "foresight.eqsat.rewriting.Searcher.requireMetadata", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#requireMetadata:foresight.eqsat.rewriting.Searcher[NodeT,OutputT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT]]", "kind" : "final def"}, {"label" : "product", "tail" : "(other: Searcher[NodeT, OutputT2, EGraphT]): Searcher[NodeT, (Seq[MatchT], OutputT2), EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.product", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#product[OutputT2](other:foresight.eqsat.rewriting.Searcher[NodeT,OutputT2,EGraphT]):foresight.eqsat.rewriting.Searcher[NodeT,(OutputT,OutputT2),EGraphT]", "kind" : "final def"}, {"label" : "chain", "tail" : "(phase: SearcherPhase[NodeT, Seq[MatchT], IntermediateT, OutputT2, EGraphT]): Searcher[NodeT, OutputT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.chain", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#chain[IntermediateT,OutputT2](phase:foresight.eqsat.rewriting.SearcherPhase[NodeT,OutputT,IntermediateT,OutputT2,EGraphT]):foresight.eqsat.rewriting.Searcher[NodeT,OutputT2,EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryReverse", "tail" : "(): Option[Applier[NodeT, MatchT, EGraphT]]", "member" : "foresight.eqsat.rewriting.ReversibleSearcher.tryReverse", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#tryReverse:Option[foresight.eqsat.rewriting.Applier[NodeT,MatchT,EGraphT]]", "kind" : "abstract def"}, {"label" : "search", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Seq[MatchT]", "member" : "foresight.eqsat.rewriting.Searcher.search", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcher.html#search(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):OutputT", "kind" : "abstract def"}], "shortDescription" : "A searcher that can be reversed into an applier."}, {"name" : "foresight.eqsat.rewriting.ReversibleSearcherPhase", "trait" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT]) => Boolean, msg: => Any): ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT]) => Boolean): ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReversibleSearcherPhase[NodeT, InputT, IntermediateT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "search", "tail" : "(egraph: EGraphT, input: InputT, parallelize: ParallelMap): Seq[MatchT]", "member" : "foresight.eqsat.rewriting.SearcherPhase.search", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#search(egraph:EGraphT,input:InputT,parallelize:foresight.eqsat.parallel.ParallelMap):OutputT", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryReverse", "tail" : "(nextPhase: Applier[NodeT, InputT, EGraphT]): Option[Applier[NodeT, MatchT, EGraphT]]", "member" : "foresight.eqsat.rewriting.ReversibleSearcherPhase.tryReverse", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#tryReverse(nextPhase:foresight.eqsat.rewriting.Applier[NodeT,InputT,EGraphT]):Option[foresight.eqsat.rewriting.Applier[NodeT,MatchT,EGraphT]]", "kind" : "abstract def"}, {"label" : "aggregate", "tail" : "(matches: Map[EClassRef, IntermediateT]): Seq[MatchT]", "member" : "foresight.eqsat.rewriting.SearcherPhase.aggregate", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#aggregate(matches:Map[foresight.eqsat.EClassRef,IntermediateT]):OutputT", "kind" : "abstract def"}, {"label" : "search", "tail" : "(call: EClassCall, egraph: EGraphT, input: InputT): IntermediateT", "member" : "foresight.eqsat.rewriting.SearcherPhase.search", "link" : "foresight\/eqsat\/rewriting\/ReversibleSearcherPhase.html#search(call:foresight.eqsat.EClassCall,egraph:EGraphT,input:InputT):IntermediateT", "kind" : "abstract def"}], "shortDescription" : "A phase of a searcher that can be reversed into an applier."}, {"name" : "foresight.eqsat.rewriting.Rule", "shortDescription" : "A rule that can be applied to an e-graph.", "object" : "foresight\/eqsat\/rewriting\/Rule$.html", "members_object" : [{"label" : "ApplicationException", "tail" : "", "member" : "foresight.eqsat.rewriting.Rule.ApplicationException", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#ApplicationException[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsRuntimeExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/Rule$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Rule$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/Rule.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/Rule.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Rule[NodeT, MatchT, EGraphT]) => Boolean, msg: => Any): Rule[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Rule.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Rule[NodeT, MatchT, EGraphT]) => Boolean): Rule[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Rule.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Rule[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Rule.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Rule[NodeT, MatchT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Rule.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Rule[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/Rule.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Rule[NodeT, MatchT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/Rule.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "tryReverse", "tail" : "(): Option[Rule[NodeT, MatchT, EGraphT]]", "member" : "foresight.eqsat.rewriting.Rule.tryReverse", "link" : "foresight\/eqsat\/rewriting\/Rule.html#tryReverse:Option[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT]]", "kind" : "def"}, {"label" : "delayed", "tail" : "(matches: Seq[MatchT], egraph: EGraphT, parallelize: ParallelMap): Command[NodeT]", "member" : "foresight.eqsat.rewriting.Rule.delayed", "link" : "foresight\/eqsat\/rewriting\/Rule.html#delayed(matches:Seq[MatchT],egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):foresight.eqsat.commands.Command[NodeT]", "kind" : "def"}, {"label" : "delayed", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Command[NodeT]", "member" : "foresight.eqsat.rewriting.Rule.delayed", "link" : "foresight\/eqsat\/rewriting\/Rule.html#delayed(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):foresight.eqsat.commands.Command[NodeT]", "kind" : "def"}, {"label" : "search", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Seq[MatchT]", "member" : "foresight.eqsat.rewriting.Rule.search", "link" : "foresight\/eqsat\/rewriting\/Rule.html#search(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Seq[MatchT]", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): EGraphT", "member" : "foresight.eqsat.rewriting.Rule.apply", "link" : "foresight\/eqsat\/rewriting\/Rule.html#apply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):EGraphT", "kind" : "def"}, {"label" : "tryApply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.rewriting.Rule.tryApply", "link" : "foresight\/eqsat\/rewriting\/Rule.html#tryApply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "def"}, {"member" : "foresight.eqsat.rewriting.Rule#<init>", "error" : "unsupported entity"}, {"label" : "applier", "tail" : ": Applier[NodeT, MatchT, EGraphT]", "member" : "foresight.eqsat.rewriting.Rule.applier", "link" : "foresight\/eqsat\/rewriting\/Rule.html#applier:foresight.eqsat.rewriting.Applier[NodeT,MatchT,EGraphT]", "kind" : "val"}, {"label" : "searcher", "tail" : ": Searcher[NodeT, Seq[MatchT], EGraphT]", "member" : "foresight.eqsat.rewriting.Rule.searcher", "link" : "foresight\/eqsat\/rewriting\/Rule.html#searcher:foresight.eqsat.rewriting.Searcher[NodeT,Seq[MatchT],EGraphT]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "foresight.eqsat.rewriting.Rule.name", "link" : "foresight\/eqsat\/rewriting\/Rule.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/rewriting\/Rule.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/Rule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/Rule.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/Rule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/Rule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/Rule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/Rule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/Rule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Rule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Rule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Rule.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/Rule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/Rule.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/Rule.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/Rule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Rule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Rule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/rewriting\/Rule.html", "kind" : "case class"}, {"name" : "foresight.eqsat.rewriting.Searcher", "object" : "foresight\/eqsat\/rewriting\/Searcher$.html", "members_object" : [{"label" : "SearcherOfPatternMatchProductOps", "tail" : "", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfPatternMatchProductOps", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#SearcherOfPatternMatchProductOps[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "SearcherOfPatternMatch", "tail" : "", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfPatternMatch", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#SearcherOfPatternMatch[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "SearcherOfSeqOfTraversableOps", "tail" : "", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOfTraversableOps", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#SearcherOfSeqOfTraversableOps[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "SearcherOfSeqOps", "tail" : "", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOps", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#SearcherOfSeqOps[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "Flatten", "tail" : "", "member" : "foresight.eqsat.rewriting.Searcher.Flatten", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#Flatten[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsSearcher[NodeT,Seq[MatchT],EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Filter", "tail" : "", "member" : "foresight.eqsat.rewriting.Searcher.Filter", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#Filter[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsReversibleSearcher[NodeT,MatchT,EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Map", "tail" : "", "member" : "foresight.eqsat.rewriting.Searcher.Map", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#Map[NodeT,InputT,OutputT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]extendsSearcher[NodeT,Seq[OutputT],EGraphT]withProductwithSerializable", "kind" : "final case class"}, {"label" : "apply", "tail" : "(phase: SearcherPhase[NodeT, Unit, T1, OutputT, EGraphT]): Searcher[NodeT, OutputT, EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.apply", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#apply[NodeT,OutputT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],T1](phase:foresight.eqsat.rewriting.SearcherPhase[NodeT,Unit,T1,OutputT,EGraphT]):foresight.eqsat.rewriting.Searcher[NodeT,OutputT,EGraphT]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Searcher[NodeT, Seq[MatchT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.empty", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#empty[NodeT,MatchT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]]:foresight.eqsat.rewriting.Searcher[NodeT,Seq[MatchT],EGraphT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Searcher$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/rewriting\/Searcher.html", "kind" : "trait", "members_trait" : [{"label" : "merge", "tail" : "(): Searcher[NodeT, Seq[PatternMatch[NodeT]], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfPatternMatchProductOps.merge", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#merge:foresight.eqsat.rewriting.Searcher[NodeT,Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]],EGraphT]", "kind" : "def"}, {"label" : "requireIndependent", "tail" : "(expr: Var[NodeT], slots: Slot*): Searcher[NodeT, Seq[PatternMatch[NodeT]], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfPatternMatch.requireIndependent", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#requireIndependent(expr:foresight.eqsat.rewriting.patterns.Pattern.Var[NodeT],slots:foresight.eqsat.Slot*):foresight.eqsat.rewriting.Searcher[NodeT,Seq[foresight.eqsat.rewriting.patterns.PatternMatch[NodeT]],EGraphT]", "kind" : "def"}, {"label" : "flatten", "tail" : "(): Searcher[NodeT, Seq[MatchT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOfTraversableOps.flatten", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#flatten:foresight.eqsat.rewriting.Searcher[NodeT,Seq[MatchT],EGraphT]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (MatchT, EGraphT) => Iterable[OutputT]): Searcher[NodeT, Seq[OutputT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOps.flatMap", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#flatMap[OutputT](f:(MatchT,EGraphT)=>Iterable[OutputT]):foresight.eqsat.rewriting.Searcher[NodeT,Seq[OutputT],EGraphT]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (MatchT, EGraphT) => OutputT): Searcher[NodeT, Seq[OutputT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOps.map", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#map[OutputT](f:(MatchT,EGraphT)=>OutputT):foresight.eqsat.rewriting.Searcher[NodeT,Seq[OutputT],EGraphT]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (MatchT, EGraphT) => Boolean): Searcher[NodeT, Seq[MatchT], EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.SearcherOfSeqOps.filter", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#filter(f:(MatchT,EGraphT)=>Boolean):foresight.eqsat.rewriting.Searcher[NodeT,Seq[MatchT],EGraphT]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Searcher[NodeT, OutputT, EGraphT]) => Boolean, msg: => Any): Searcher[NodeT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Searcher[NodeT, OutputT, EGraphT]) => Boolean): Searcher[NodeT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Searcher[NodeT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Searcher[NodeT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Searcher[NodeT, OutputT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Searcher[NodeT, OutputT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "requireRoot", "tail" : "(): Searcher[NodeT, OutputT, EGraphWithRoot[NodeT, EGraphT]]", "member" : "foresight.eqsat.rewriting.Searcher.requireRoot", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#requireRoot:foresight.eqsat.rewriting.Searcher[NodeT,OutputT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]", "kind" : "final def"}, {"label" : "requireMetadata", "tail" : "(): Searcher[NodeT, OutputT, EGraphWithMetadata[NodeT, EGraphT]]", "member" : "foresight.eqsat.rewriting.Searcher.requireMetadata", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#requireMetadata:foresight.eqsat.rewriting.Searcher[NodeT,OutputT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT]]", "kind" : "final def"}, {"label" : "product", "tail" : "(other: Searcher[NodeT, OutputT2, EGraphT]): Searcher[NodeT, (OutputT, OutputT2), EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.product", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#product[OutputT2](other:foresight.eqsat.rewriting.Searcher[NodeT,OutputT2,EGraphT]):foresight.eqsat.rewriting.Searcher[NodeT,(OutputT,OutputT2),EGraphT]", "kind" : "final def"}, {"label" : "chain", "tail" : "(phase: SearcherPhase[NodeT, OutputT, IntermediateT, OutputT2, EGraphT]): Searcher[NodeT, OutputT2, EGraphT]", "member" : "foresight.eqsat.rewriting.Searcher.chain", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#chain[IntermediateT,OutputT2](phase:foresight.eqsat.rewriting.SearcherPhase[NodeT,OutputT,IntermediateT,OutputT2,EGraphT]):foresight.eqsat.rewriting.Searcher[NodeT,OutputT2,EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/Searcher.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "search", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): OutputT", "member" : "foresight.eqsat.rewriting.Searcher.search", "link" : "foresight\/eqsat\/rewriting\/Searcher.html#search(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):OutputT", "kind" : "abstract def"}], "shortDescription" : "A searcher that searches for matches in an e-graph."}, {"name" : "foresight.eqsat.rewriting.SearcherPhase", "trait" : "foresight\/eqsat\/rewriting\/SearcherPhase.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT]) => Boolean, msg: => Any): SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT]) => Boolean): SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SearcherPhase[NodeT, InputT, IntermediateT, OutputT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "search", "tail" : "(egraph: EGraphT, input: InputT, parallelize: ParallelMap): OutputT", "member" : "foresight.eqsat.rewriting.SearcherPhase.search", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#search(egraph:EGraphT,input:InputT,parallelize:foresight.eqsat.parallel.ParallelMap):OutputT", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "aggregate", "tail" : "(matches: Map[EClassRef, IntermediateT]): OutputT", "member" : "foresight.eqsat.rewriting.SearcherPhase.aggregate", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#aggregate(matches:Map[foresight.eqsat.EClassRef,IntermediateT]):OutputT", "kind" : "abstract def"}, {"label" : "search", "tail" : "(call: EClassCall, egraph: EGraphT, input: InputT): IntermediateT", "member" : "foresight.eqsat.rewriting.SearcherPhase.search", "link" : "foresight\/eqsat\/rewriting\/SearcherPhase.html#search(call:foresight.eqsat.EClassCall,egraph:EGraphT,input:InputT):IntermediateT", "kind" : "abstract def"}], "shortDescription" : "A phase of a searcher that searches for matches in an e-graph."}], "foresight.util.random" : [{"name" : "foresight.util.random.DiscreteDistribution", "trait" : "foresight\/util\/random\/DiscreteDistribution.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/util\/random\/DiscreteDistribution.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/util\/random\/DiscreteDistribution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DiscreteDistribution) => Boolean, msg: => Any): DiscreteDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/DiscreteDistribution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DiscreteDistribution) => Boolean): DiscreteDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/DiscreteDistribution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): DiscreteDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/DiscreteDistribution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DiscreteDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/DiscreteDistribution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DiscreteDistribution, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/util\/random\/DiscreteDistribution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DiscreteDistribution, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/util\/random\/DiscreteDistribution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "prioritiesToProbabilities", "tail" : "(mapping: Seq[(K, Priority)])(ord: Ordering[Priority]): Seq[(K, Double)]", "member" : "foresight.util.random.DiscreteDistribution.prioritiesToProbabilities", "link" : "foresight\/util\/random\/DiscreteDistribution.html#prioritiesToProbabilities[K,Priority](mapping:Seq[(K,Priority)])(implicitord:Ordering[Priority]):Seq[(K,Double)]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/util\/random\/DiscreteDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/util\/random\/DiscreteDistribution.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/util\/random\/DiscreteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/util\/random\/DiscreteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/util\/random\/DiscreteDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/util\/random\/DiscreteDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/util\/random\/DiscreteDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/DiscreteDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/DiscreteDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/DiscreteDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/util\/random\/DiscreteDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/util\/random\/DiscreteDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/util\/random\/DiscreteDistribution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/util\/random\/DiscreteDistribution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/util\/random\/DiscreteDistribution.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/util\/random\/DiscreteDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/util\/random\/DiscreteDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/util\/random\/DiscreteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/util\/random\/DiscreteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: Int): Double", "member" : "foresight.util.random.DiscreteDistribution.apply", "link" : "foresight\/util\/random\/DiscreteDistribution.html#apply(value:Int):Double", "kind" : "abstract def"}], "shortDescription" : "A discrete probability distribution."}, {"name" : "foresight.util.random.Random", "object" : "foresight\/util\/random\/Random$.html", "members_object" : [{"label" : "apply", "tail" : "(seed: Long): Random", "member" : "foresight.util.random.Random.apply", "link" : "foresight\/util\/random\/Random$.html#apply(seed:Long):foresight.util.random.Random", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/util\/random\/Random$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/util\/random\/Random$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/util\/random\/Random$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/util\/random\/Random$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/util\/random\/Random$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/util\/random\/Random$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/util\/random\/Random$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Random$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Random$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Random$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/util\/random\/Random$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/util\/random\/Random$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/util\/random\/Random$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/util\/random\/Random$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/util\/random\/Random$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/util\/random\/Random$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/util\/random\/Random$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/util\/random\/Random$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/util\/random\/Random$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/util\/random\/Random.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/util\/random\/Random.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/util\/random\/Random.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Random) => Boolean, msg: => Any): Random", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/Random.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Random) => Boolean): Random", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/Random.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Random", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/Random.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Random", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/Random.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Random, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/util\/random\/Random.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Random, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/util\/random\/Random.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "nextDoubles", "tail" : "(n: Int): (Seq[Double], Random)", "member" : "foresight.util.random.Random.nextDoubles", "link" : "foresight\/util\/random\/Random.html#nextDoubles(n:Int):(Seq[Double],foresight.util.random.Random)", "kind" : "final def"}, {"label" : "nextDouble", "tail" : "(): (Double, Random)", "member" : "foresight.util.random.Random.nextDouble", "link" : "foresight\/util\/random\/Random.html#nextDouble:(Double,foresight.util.random.Random)", "kind" : "def"}, {"label" : "nextInt", "tail" : "(): (Int, Random)", "member" : "foresight.util.random.Random.nextInt", "link" : "foresight\/util\/random\/Random.html#nextInt:(Int,foresight.util.random.Random)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/util\/random\/Random.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/util\/random\/Random.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/util\/random\/Random.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/util\/random\/Random.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/util\/random\/Random.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/util\/random\/Random.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/util\/random\/Random.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Random.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Random.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Random.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/util\/random\/Random.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/util\/random\/Random.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/util\/random\/Random.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/util\/random\/Random.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/util\/random\/Random.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/util\/random\/Random.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/util\/random\/Random.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/util\/random\/Random.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/util\/random\/Random.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nextLong", "tail" : "(): (Long, Random)", "member" : "foresight.util.random.Random.nextLong", "link" : "foresight\/util\/random\/Random.html#nextLong:(Long,foresight.util.random.Random)", "kind" : "abstract def"}], "shortDescription" : "A trait that defines an immutable random number generator interface."}, {"name" : "foresight.util.random.Sample", "shortDescription" : "Utility object for performing random sampling operations.", "object" : "foresight\/util\/random\/Sample$.html", "members_object" : [{"label" : "withoutReplacement", "tail" : "(elements: Seq[(A, Double)], n: Int, rng: Random): (Seq[A], Random)", "member" : "foresight.util.random.Sample.withoutReplacement", "link" : "foresight\/util\/random\/Sample$.html#withoutReplacement[A](elements:Seq[(A,Double)],n:Int,rng:foresight.util.random.Random):(Seq[A],foresight.util.random.Random)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/util\/random\/Sample$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/util\/random\/Sample$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/util\/random\/Sample$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/util\/random\/Sample$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/util\/random\/Sample$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/util\/random\/Sample$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/util\/random\/Sample$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Sample$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Sample$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/Sample$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/util\/random\/Sample$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/util\/random\/Sample$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/util\/random\/Sample$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/util\/random\/Sample$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/util\/random\/Sample$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/util\/random\/Sample$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/util\/random\/Sample$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/util\/random\/Sample$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/util\/random\/Sample$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "foresight.util.random.ShiftedGeometricDistribution", "shortDescription" : "A shifted geometric distribution.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShiftedGeometricDistribution) => Boolean, msg: => Any): ShiftedGeometricDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShiftedGeometricDistribution) => Boolean): ShiftedGeometricDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ShiftedGeometricDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ShiftedGeometricDistribution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ShiftedGeometricDistribution, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ShiftedGeometricDistribution, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(value: Int): Double", "member" : "foresight.util.random.ShiftedGeometricDistribution.apply", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#apply(value:Int):Double", "kind" : "def"}, {"member" : "foresight.util.random.ShiftedGeometricDistribution#<init>", "error" : "unsupported entity"}, {"label" : "p", "tail" : ": Double", "member" : "foresight.util.random.ShiftedGeometricDistribution.p", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#p:Double", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "prioritiesToProbabilities", "tail" : "(mapping: Seq[(K, Priority)])(ord: Ordering[Priority]): Seq[(K, Double)]", "member" : "foresight.util.random.DiscreteDistribution.prioritiesToProbabilities", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#prioritiesToProbabilities[K,Priority](mapping:Seq[(K,Priority)])(implicitord:Ordering[Priority]):Seq[(K,Double)]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/util\/random\/ShiftedGeometricDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/util\/random\/ShiftedGeometricDistribution.html", "kind" : "case class"}], "foresight.eqsat.saturation" : [{"name" : "foresight.eqsat.saturation.BackoffRule", "shortDescription" : "A rewrite rule annotated with a match limit and a ban length.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BackoffRule[NodeT, RuleT, MatchT]) => Boolean, msg: => Any): BackoffRule[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BackoffRule[NodeT, RuleT, MatchT]) => Boolean): BackoffRule[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): BackoffRule[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BackoffRule[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BackoffRule[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BackoffRule[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.BackoffRule#<init>", "error" : "unsupported entity"}, {"label" : "initialBanLength", "tail" : ": Int", "member" : "foresight.eqsat.saturation.BackoffRule.initialBanLength", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#initialBanLength:Int", "kind" : "val"}, {"label" : "initialMatchLimit", "tail" : ": Int", "member" : "foresight.eqsat.saturation.BackoffRule.initialMatchLimit", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#initialMatchLimit:Int", "kind" : "val"}, {"label" : "rule", "tail" : ": RuleT", "member" : "foresight.eqsat.saturation.BackoffRule.rule", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#rule:RuleT", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/BackoffRule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/BackoffRule.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.BackoffRuleApplication", "shortDescription" : "A strategy that applies a sequence of rules with backoff.", "members_case class" : [{"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], (BackoffRuleStats[NodeT, RuleT, MatchT], Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordingMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], (BackoffRuleStats[NodeT, RuleT, MatchT], Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphT], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRoot[NodeT, EGraphT], (BackoffRuleStats[NodeT, RuleT, MatchT], Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "closeRoot", "tail" : "(findRoot: (EGraphT) => EClassCall): Strategy[EGraphT, BackoffRuleStats[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.closeRoot", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#closeRoot(findRoot:EGraphT=>foresight.eqsat.EClassCall):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeRecording", "tail" : "(): Strategy[EGraphT, BackoffRuleStats[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordedApplications.closeRecording", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#closeRecording:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeMetadata", "tail" : "(): Strategy[EGraphT, BackoffRuleStats[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.closeMetadata", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#closeMetadata:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "addAnalyses", "tail" : "(analyses: Analysis[NodeT, _]*): Strategy[EGraphWithMetadata[NodeT, EGraphT], (BackoffRuleStats[NodeT, RuleT, MatchT], Boolean)]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.addAnalyses", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#addAnalyses(analyses:foresight.eqsat.metadata.Analysis[NodeT,_]*):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT],(Data,Boolean)]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT]) => Boolean, msg: => Any): BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT]) => Boolean): BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BackoffRuleApplication[NodeT, RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, data: BackoffRuleStats[NodeT, RuleT, MatchT], parallelize: ParallelMap): (Option[EGraphT], BackoffRuleStats[NodeT, RuleT, MatchT])", "member" : "foresight.eqsat.saturation.BackoffRuleApplication.apply", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#apply(egraph:EGraphT,data:foresight.eqsat.saturation.BackoffRuleStats[NodeT,RuleT,MatchT],parallelize:foresight.eqsat.parallel.ParallelMap):(Option[EGraphT],foresight.eqsat.saturation.BackoffRuleStats[NodeT,RuleT,MatchT])", "kind" : "def"}, {"label" : "initialData", "tail" : "(): BackoffRuleStats[NodeT, RuleT, MatchT]", "member" : "foresight.eqsat.saturation.BackoffRuleApplication.initialData", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#initialData:foresight.eqsat.saturation.BackoffRuleStats[NodeT,RuleT,MatchT]", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.BackoffRuleApplication#<init>", "error" : "unsupported entity"}, {"label" : "searchAndApply", "tail" : ": SearchAndApply[RuleT, EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.BackoffRuleApplication.searchAndApply", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#searchAndApply:foresight.eqsat.saturation.SearchAndApply[RuleT,EGraphT,MatchT]", "kind" : "val"}, {"label" : "rules", "tail" : ": Seq[BackoffRule[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.BackoffRuleApplication.rules", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#rules:Seq[foresight.eqsat.saturation.BackoffRule[NodeT,RuleT,MatchT]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withChangeLogger", "tail" : "(logChange: (EGraphT, EGraphT) => Unit): Strategy[EGraphT, BackoffRuleStats[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.Strategy.withChangeLogger", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#withChangeLogger(logChange:(EGraphT,EGraphT)=>Unit):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "withRoot", "tail" : "(): Strategy[EGraphWithRoot[_, EGraphT], BackoffRuleStats[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.Strategy.withRoot", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#withRoot:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[_,EGraphT],Data]", "kind" : "final def"}, {"label" : "dropData", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.dropData", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#dropData:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Option[Duration]): Strategy[EGraphT, (BackoffRuleStats[NodeT, RuleT, MatchT], Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#withTimeout(timeout:Option[scala.concurrent.duration.Duration]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Duration): Strategy[EGraphT, (BackoffRuleStats[NodeT, RuleT, MatchT], Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#withTimeout(timeout:scala.concurrent.duration.Duration):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Option[Int]): Strategy[EGraphT, (BackoffRuleStats[NodeT, RuleT, MatchT], Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#withIterationLimit(limit:Option[Int]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Int): Strategy[EGraphT, (BackoffRuleStats[NodeT, RuleT, MatchT], Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#withIterationLimit(limit:Int):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "repeatUntilStable", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStable", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#repeatUntilStable:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "repeatUntilStableWithState", "tail" : "(): Strategy[EGraphT, BackoffRuleStats[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStableWithState", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#repeatUntilStableWithState:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "thenApply", "tail" : "(other: Strategy[EGraphT, Data2]): Strategy[EGraphT, (BackoffRuleStats[NodeT, RuleT, MatchT], Data2)]", "member" : "foresight.eqsat.saturation.Strategy.thenApply", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#thenApply[Data2](other:foresight.eqsat.saturation.Strategy[EGraphT,Data2]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Data2)]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.saturation.Strategy.apply", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#apply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/BackoffRuleApplication.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.BackoffRuleStats", "shortDescription" : "Statistics for the backoff rule application strategy.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BackoffRuleStats[NodeT, RuleT, MatchT]) => Boolean, msg: => Any): BackoffRuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BackoffRuleStats[NodeT, RuleT, MatchT]) => Boolean): BackoffRuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): BackoffRuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BackoffRuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BackoffRuleStats[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BackoffRuleStats[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.BackoffRuleStats#<init>", "error" : "unsupported entity"}, {"label" : "random", "tail" : ": Random", "member" : "foresight.eqsat.saturation.BackoffRuleStats.random", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#random:scala.util.Random", "kind" : "val"}, {"label" : "stats", "tail" : ": Map[String, RuleStats[NodeT, RuleT, MatchT]]", "member" : "foresight.eqsat.saturation.BackoffRuleStats.stats", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#stats:Map[String,foresight.eqsat.saturation.RuleStats[NodeT,RuleT,MatchT]]", "kind" : "val"}, {"label" : "iteration", "tail" : ": Int", "member" : "foresight.eqsat.saturation.BackoffRuleStats.iteration", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#iteration:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/BackoffRuleStats.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.EGraphWithRecordedApplications", "shortDescription" : "An e-graph that records the set of matches that have been applied to it.", "object" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html", "members_object" : [{"label" : "apply", "tail" : "(egraph: Repr): EGraphWithRecordedApplications[Node, Repr, Match]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.apply", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#apply[Node,Repr<:foresight.eqsat.EGraphLike[Node,Repr]withforesight.eqsat.EGraph[Node],Match<:foresight.eqsat.rewriting.PortableMatch[Node,Match]](egraph:Repr):foresight.eqsat.saturation.EGraphWithRecordedApplications[Node,Repr,Match]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithRecordedApplications[Node, Repr, Match]) => Boolean, msg: => Any): EGraphWithRecordedApplications[Node, Repr, Match]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithRecordedApplications[Node, Repr, Match]) => Boolean): EGraphWithRecordedApplications[Node, Repr, Match]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EGraphWithRecordedApplications[Node, Repr, Match]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EGraphWithRecordedApplications[Node, Repr, Match]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EGraphWithRecordedApplications[Node, Repr, Match], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EGraphWithRecordedApplications[Node, Repr, Match], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "emptied", "tail" : "(): EGraphWithRecordedApplications[Node, Repr, Match]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.emptied", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#emptied:foresight.eqsat.saturation.EGraphWithRecordedApplications[Node,Repr,Match]", "kind" : "def"}, {"label" : "record", "tail" : "(appliedMatches: Map[String, Set[Match]]): EGraphWithRecordedApplications[Node, Repr, Match]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.record", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#record(appliedMatches:Map[String,Set[Match]]):foresight.eqsat.saturation.EGraphWithRecordedApplications[Node,Repr,Match]", "kind" : "def"}, {"label" : "applications", "tail" : "(ruleName: String): Set[Match]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.applications", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#applications(ruleName:String):Set[Match]", "kind" : "def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)], parallelize: ParallelMap): (Set[Set[EClassCall]], EGraphWithRecordedApplications[Node, Repr, Match])", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.unionMany", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)],parallelize:foresight.eqsat.parallel.ParallelMap):(Set[Set[foresight.eqsat.EClassCall]],foresight.eqsat.saturation.EGraphWithRecordedApplications[Node,Repr,Match])", "kind" : "def"}, {"label" : "tryAddMany", "tail" : "(nodes: Seq[ENode[Node]], parallelize: ParallelMap): (Seq[AddNodeResult], EGraphWithRecordedApplications[Node, Repr, Match])", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.tryAddMany", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#tryAddMany(nodes:Seq[foresight.eqsat.ENode[Node]],parallelize:foresight.eqsat.parallel.ParallelMap):(Seq[foresight.eqsat.AddNodeResult],foresight.eqsat.saturation.EGraphWithRecordedApplications[Node,Repr,Match])", "kind" : "def"}, {"label" : "areSame", "tail" : "(first: EClassCall, second: EClassCall): Boolean", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.areSame", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#areSame(first:foresight.eqsat.EClassCall,second:foresight.eqsat.EClassCall):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(node: ENode[Node]): Option[EClassCall]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.find", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#find(node:foresight.eqsat.ENode[Node]):Option[foresight.eqsat.EClassCall]", "kind" : "def"}, {"label" : "users", "tail" : "(ref: EClassRef): Set[ENode[Node]]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.users", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#users(ref:foresight.eqsat.EClassRef):Set[foresight.eqsat.ENode[Node]]", "kind" : "def"}, {"label" : "nodes", "tail" : "(call: EClassCall): Set[ENode[Node]]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.nodes", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#nodes(call:foresight.eqsat.EClassCall):Set[foresight.eqsat.ENode[Node]]", "kind" : "def"}, {"label" : "classes", "tail" : "(): Iterable[EClassRef]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.classes", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#classes:Iterable[foresight.eqsat.EClassRef]", "kind" : "def"}, {"label" : "canonicalize", "tail" : "(node: ENode[Node]): ShapeCall[Node]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.canonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#canonicalize(node:foresight.eqsat.ENode[Node]):foresight.eqsat.ShapeCall[Node]", "kind" : "def"}, {"label" : "tryCanonicalize", "tail" : "(ref: EClassRef): Option[EClassCall]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.tryCanonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#tryCanonicalize(ref:foresight.eqsat.EClassRef):Option[foresight.eqsat.EClassCall]", "kind" : "def"}, {"label" : "migrateTo", "tail" : "(newEgraph: NewRepr): EGraphWithRecordedApplications[Node, NewRepr, Match]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.migrateTo", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#migrateTo[NewRepr<:foresight.eqsat.EGraphLike[Node,NewRepr]withforesight.eqsat.EGraph[Node]](newEgraph:NewRepr):foresight.eqsat.saturation.EGraphWithRecordedApplications[Node,NewRepr,Match]", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications#<init>", "error" : "unsupported entity"}, {"label" : "applied", "tail" : ": Map[String, Set[Match]]", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.applied", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#applied:Map[String,Set[Match]]", "kind" : "val"}, {"label" : "egraph", "tail" : ": Repr", "member" : "foresight.eqsat.saturation.EGraphWithRecordedApplications.egraph", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#egraph:Repr", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(): EGraphWithMetadata[Node, EGraphWithRecordedApplications[Node, Repr, Match]]", "member" : "foresight.eqsat.EGraphLike.withMetadata", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#withMetadata:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,This]", "kind" : "final def"}, {"label" : "union", "tail" : "(left: EClassCall, right: EClassCall): EGraphWithPendingUnions[EGraphWithRecordedApplications[Node, Repr, Match]]", "member" : "foresight.eqsat.EGraphLike.union", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#union(left:foresight.eqsat.EClassCall,right:foresight.eqsat.EClassCall):foresight.eqsat.EGraphWithPendingUnions[This]", "kind" : "final def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)]): (Set[Set[EClassCall]], EGraphWithRecordedApplications[Node, Repr, Match])", "member" : "foresight.eqsat.EGraphLike.unionMany", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)]):(Set[Set[foresight.eqsat.EClassCall]],This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: Tree[Node]): (EClassCall, EGraphWithRecordedApplications[Node, Repr, Match])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#add(tree:foresight.eqsat.Tree[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: MixedTree[Node, EClassCall]): (EClassCall, EGraphWithRecordedApplications[Node, Repr, Match])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#add(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(node: ENode[Node]): (EClassCall, EGraphWithRecordedApplications[Node, Repr, Match])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#add(node:foresight.eqsat.ENode[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: Tree[Node]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#find(tree:foresight.eqsat.Tree[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: MixedTree[Node, EClassCall]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#find(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: Tree[Node]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#contains(tree:foresight.eqsat.Tree[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: MixedTree[Node, EClassCall]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#contains(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(node: ENode[Node]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#contains(node:foresight.eqsat.ENode[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(ref: EClassRef): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#contains(ref:foresight.eqsat.EClassRef):Boolean", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(call: EClassCall): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#canonicalize(call:foresight.eqsat.EClassCall):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(ref: EClassRef): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#canonicalize(ref:foresight.eqsat.EClassRef):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "nodeCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.nodeCount", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#nodeCount:Int", "kind" : "final def"}, {"label" : "classCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.classCount", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#classCount:Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/EGraphWithRecordedApplications.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.EGraphWithRoot", "shortDescription" : "An e-graph that has a root e-class.", "object" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html", "members_object" : [{"label" : "from", "tail" : "(tree: MixedTree[NodeT, Nothing]): (EClassCall, EGraphWithRoot[NodeT, EGraph[NodeT]])", "member" : "foresight.eqsat.saturation.EGraphWithRoot.from", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#from[NodeT](tree:foresight.eqsat.MixedTree[NodeT,Nothing]):(foresight.eqsat.EClassCall,foresight.eqsat.saturation.EGraphWithRoot[NodeT,foresight.eqsat.EGraph[NodeT]])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithRoot[Node, Repr]) => Boolean, msg: => Any): EGraphWithRoot[Node, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EGraphWithRoot[Node, Repr]) => Boolean): EGraphWithRoot[Node, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): EGraphWithRoot[Node, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EGraphWithRoot[Node, Repr]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EGraphWithRoot[Node, Repr], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EGraphWithRoot[Node, Repr], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "emptied", "tail" : "(): EGraphWithRoot[Node, Repr]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.emptied", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#emptied:foresight.eqsat.saturation.EGraphWithRoot[Node,Repr]", "kind" : "def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)], parallelize: ParallelMap): (Set[Set[EClassCall]], EGraphWithRoot[Node, Repr])", "member" : "foresight.eqsat.saturation.EGraphWithRoot.unionMany", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)],parallelize:foresight.eqsat.parallel.ParallelMap):(Set[Set[foresight.eqsat.EClassCall]],foresight.eqsat.saturation.EGraphWithRoot[Node,Repr])", "kind" : "def"}, {"label" : "tryAddMany", "tail" : "(nodes: Seq[ENode[Node]], parallelize: ParallelMap): (Seq[AddNodeResult], EGraphWithRoot[Node, Repr])", "member" : "foresight.eqsat.saturation.EGraphWithRoot.tryAddMany", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#tryAddMany(nodes:Seq[foresight.eqsat.ENode[Node]],parallelize:foresight.eqsat.parallel.ParallelMap):(Seq[foresight.eqsat.AddNodeResult],foresight.eqsat.saturation.EGraphWithRoot[Node,Repr])", "kind" : "def"}, {"label" : "areSame", "tail" : "(first: EClassCall, second: EClassCall): Boolean", "member" : "foresight.eqsat.saturation.EGraphWithRoot.areSame", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#areSame(first:foresight.eqsat.EClassCall,second:foresight.eqsat.EClassCall):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(node: ENode[Node]): Option[EClassCall]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.find", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#find(node:foresight.eqsat.ENode[Node]):Option[foresight.eqsat.EClassCall]", "kind" : "def"}, {"label" : "users", "tail" : "(ref: EClassRef): Set[ENode[Node]]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.users", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#users(ref:foresight.eqsat.EClassRef):Set[foresight.eqsat.ENode[Node]]", "kind" : "def"}, {"label" : "nodes", "tail" : "(call: EClassCall): Set[ENode[Node]]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.nodes", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#nodes(call:foresight.eqsat.EClassCall):Set[foresight.eqsat.ENode[Node]]", "kind" : "def"}, {"label" : "classes", "tail" : "(): Iterable[EClassRef]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.classes", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#classes:Iterable[foresight.eqsat.EClassRef]", "kind" : "def"}, {"label" : "canonicalize", "tail" : "(node: ENode[Node]): ShapeCall[Node]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.canonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#canonicalize(node:foresight.eqsat.ENode[Node]):foresight.eqsat.ShapeCall[Node]", "kind" : "def"}, {"label" : "tryCanonicalize", "tail" : "(ref: EClassRef): Option[EClassCall]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.tryCanonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#tryCanonicalize(ref:foresight.eqsat.EClassRef):Option[foresight.eqsat.EClassCall]", "kind" : "def"}, {"label" : "migrateTo", "tail" : "(newGraph: Repr): EGraphWithRoot[Node, Repr]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.migrateTo", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#migrateTo(newGraph:Repr):foresight.eqsat.saturation.EGraphWithRoot[Node,Repr]", "kind" : "def"}, {"label" : "withRoot", "tail" : "(root: EClassCall): EGraphWithRoot[Node, Repr]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.withRoot", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#withRoot(root:foresight.eqsat.EClassCall):foresight.eqsat.saturation.EGraphWithRoot[Node,Repr]", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.EGraphWithRoot#<init>", "error" : "unsupported entity"}, {"label" : "root", "tail" : ": Option[EClassCall]", "member" : "foresight.eqsat.saturation.EGraphWithRoot.root", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#root:Option[foresight.eqsat.EClassCall]", "kind" : "val"}, {"label" : "egraph", "tail" : ": Repr", "member" : "foresight.eqsat.saturation.EGraphWithRoot.egraph", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#egraph:Repr", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(): EGraphWithMetadata[Node, EGraphWithRoot[Node, Repr]]", "member" : "foresight.eqsat.EGraphLike.withMetadata", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#withMetadata:foresight.eqsat.metadata.EGraphWithMetadata[NodeT,This]", "kind" : "final def"}, {"label" : "union", "tail" : "(left: EClassCall, right: EClassCall): EGraphWithPendingUnions[EGraphWithRoot[Node, Repr]]", "member" : "foresight.eqsat.EGraphLike.union", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#union(left:foresight.eqsat.EClassCall,right:foresight.eqsat.EClassCall):foresight.eqsat.EGraphWithPendingUnions[This]", "kind" : "final def"}, {"label" : "unionMany", "tail" : "(pairs: Seq[(EClassCall, EClassCall)]): (Set[Set[EClassCall]], EGraphWithRoot[Node, Repr])", "member" : "foresight.eqsat.EGraphLike.unionMany", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#unionMany(pairs:Seq[(foresight.eqsat.EClassCall,foresight.eqsat.EClassCall)]):(Set[Set[foresight.eqsat.EClassCall]],This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: Tree[Node]): (EClassCall, EGraphWithRoot[Node, Repr])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#add(tree:foresight.eqsat.Tree[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(tree: MixedTree[Node, EClassCall]): (EClassCall, EGraphWithRoot[Node, Repr])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#add(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "add", "tail" : "(node: ENode[Node]): (EClassCall, EGraphWithRoot[Node, Repr])", "member" : "foresight.eqsat.EGraphLike.add", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#add(node:foresight.eqsat.ENode[NodeT]):(foresight.eqsat.EClassCall,This)", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: Tree[Node]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#find(tree:foresight.eqsat.Tree[NodeT]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "find", "tail" : "(tree: MixedTree[Node, EClassCall]): Option[EClassCall]", "member" : "foresight.eqsat.EGraphLike.find", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#find(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Option[foresight.eqsat.EClassCall]", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: Tree[Node]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#contains(tree:foresight.eqsat.Tree[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(tree: MixedTree[Node, EClassCall]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#contains(tree:foresight.eqsat.MixedTree[NodeT,foresight.eqsat.EClassCall]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(node: ENode[Node]): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#contains(node:foresight.eqsat.ENode[NodeT]):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(ref: EClassRef): Boolean", "member" : "foresight.eqsat.EGraphLike.contains", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#contains(ref:foresight.eqsat.EClassRef):Boolean", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(call: EClassCall): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#canonicalize(call:foresight.eqsat.EClassCall):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "canonicalize", "tail" : "(ref: EClassRef): EClassCall", "member" : "foresight.eqsat.EGraphLike.canonicalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#canonicalize(ref:foresight.eqsat.EClassRef):foresight.eqsat.EClassCall", "kind" : "final def"}, {"label" : "nodeCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.nodeCount", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#nodeCount:Int", "kind" : "final def"}, {"label" : "classCount", "tail" : "(): Int", "member" : "foresight.eqsat.EGraphLike.classCount", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#classCount:Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/EGraphWithRoot.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.MaximalRuleApplication", "shortDescription" : "A strategy that, for a sequence of rules, applies every match for each rule.", "object" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html", "members_object" : [{"label" : "apply", "tail" : "(rules: Seq[Rule[NodeT, MatchT, EGraphT]]): MaximalRuleApplication[NodeT, Rule[NodeT, MatchT, EGraphT], EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.MaximalRuleApplication.apply", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT](rules:Seq[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT]]):foresight.eqsat.saturation.MaximalRuleApplication[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],EGraphT,MatchT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], (Unit, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordingMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], (Unit, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphT], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRoot[NodeT, EGraphT], (Unit, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "closeRoot", "tail" : "(findRoot: (EGraphT) => EClassCall): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.closeRoot", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#closeRoot(findRoot:EGraphT=>foresight.eqsat.EClassCall):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeRecording", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordedApplications.closeRecording", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#closeRecording:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeMetadata", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.closeMetadata", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#closeMetadata:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "addAnalyses", "tail" : "(analyses: Analysis[NodeT, _]*): Strategy[EGraphWithMetadata[NodeT, EGraphT], (Unit, Boolean)]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.addAnalyses", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#addAnalyses(analyses:foresight.eqsat.metadata.Analysis[NodeT,_]*):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT],(Data,Boolean)]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT]) => Boolean, msg: => Any): MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT]) => Boolean): MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MaximalRuleApplication[NodeT, RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, data: Unit, parallelize: ParallelMap): (Option[EGraphT], Unit)", "member" : "foresight.eqsat.saturation.MaximalRuleApplication.apply", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#apply(egraph:EGraphT,data:Unit,parallelize:foresight.eqsat.parallel.ParallelMap):(Option[EGraphT],Unit)", "kind" : "def"}, {"label" : "initialData", "tail" : "(): Unit", "member" : "foresight.eqsat.saturation.MaximalRuleApplication.initialData", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#initialData:Unit", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.MaximalRuleApplication#<init>", "error" : "unsupported entity"}, {"label" : "searchAndApply", "tail" : ": SearchAndApply[RuleT, EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.MaximalRuleApplication.searchAndApply", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#searchAndApply:foresight.eqsat.saturation.SearchAndApply[RuleT,EGraphT,MatchT]", "kind" : "val"}, {"label" : "rules", "tail" : ": Seq[RuleT]", "member" : "foresight.eqsat.saturation.MaximalRuleApplication.rules", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#rules:Seq[RuleT]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withChangeLogger", "tail" : "(logChange: (EGraphT, EGraphT) => Unit): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.withChangeLogger", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#withChangeLogger(logChange:(EGraphT,EGraphT)=>Unit):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "withRoot", "tail" : "(): Strategy[EGraphWithRoot[_, EGraphT], Unit]", "member" : "foresight.eqsat.saturation.Strategy.withRoot", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#withRoot:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[_,EGraphT],Data]", "kind" : "final def"}, {"label" : "dropData", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.dropData", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#dropData:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Option[Duration]): Strategy[EGraphT, (Unit, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#withTimeout(timeout:Option[scala.concurrent.duration.Duration]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Duration): Strategy[EGraphT, (Unit, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#withTimeout(timeout:scala.concurrent.duration.Duration):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Option[Int]): Strategy[EGraphT, (Unit, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#withIterationLimit(limit:Option[Int]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Int): Strategy[EGraphT, (Unit, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#withIterationLimit(limit:Int):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "repeatUntilStable", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStable", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#repeatUntilStable:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "repeatUntilStableWithState", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStableWithState", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#repeatUntilStableWithState:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "thenApply", "tail" : "(other: Strategy[EGraphT, Data2]): Strategy[EGraphT, (Unit, Data2)]", "member" : "foresight.eqsat.saturation.Strategy.thenApply", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#thenApply[Data2](other:foresight.eqsat.saturation.Strategy[EGraphT,Data2]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Data2)]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.saturation.Strategy.apply", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#apply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/MaximalRuleApplication.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.MaximalRuleApplicationWithCaching", "shortDescription" : "A strategy that, for a sequence of rules, applies every match for each rule.", "object" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html", "members_object" : [{"label" : "apply", "tail" : "(rules: Seq[Rule[NodeT, MatchT, EGraphT]]): Strategy[EGraphWithRecordedApplications[NodeT, EGraphT, MatchT], Unit]", "member" : "foresight.eqsat.saturation.MaximalRuleApplicationWithCaching.apply", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT<:foresight.eqsat.rewriting.PortableMatch[NodeT,MatchT]](rules:Seq[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT]]):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,EGraphT,MatchT],Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/MaximalRuleApplicationWithCaching$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "foresight.eqsat.saturation.Rebase", "shortDescription" : "A strategy that rebases the e-graph by extracting a tree from the e-graph, subsequently adding that tree to a newe-graph.", "object" : "foresight\/eqsat\/saturation\/Rebase$.html", "members_object" : [{"label" : "apply", "tail" : "(extractor: Extractor[NodeT, EGraphT]): Rebase[NodeT, EGraphWithRoot[NodeT, EGraphT]]", "member" : "foresight.eqsat.saturation.Rebase.apply", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT]](extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT]):foresight.eqsat.saturation.Rebase[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/Rebase$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/Rebase$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], (Unit, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordingMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/Rebase.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], (Unit, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/Rebase.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphT], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRoot[NodeT, EGraphT], (Unit, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/Rebase.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "closeRoot", "tail" : "(findRoot: (EGraphT) => EClassCall): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.closeRoot", "link" : "foresight\/eqsat\/saturation\/Rebase.html#closeRoot(findRoot:EGraphT=>foresight.eqsat.EClassCall):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeRecording", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordedApplications.closeRecording", "link" : "foresight\/eqsat\/saturation\/Rebase.html#closeRecording:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeMetadata", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.closeMetadata", "link" : "foresight\/eqsat\/saturation\/Rebase.html#closeMetadata:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "addAnalyses", "tail" : "(analyses: Analysis[NodeT, _]*): Strategy[EGraphWithMetadata[NodeT, EGraphT], (Unit, Boolean)]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.addAnalyses", "link" : "foresight\/eqsat\/saturation\/Rebase.html#addAnalyses(analyses:foresight.eqsat.metadata.Analysis[NodeT,_]*):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT],(Data,Boolean)]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/Rebase.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/Rebase.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Rebase[NodeT, EGraphT]) => Boolean, msg: => Any): Rebase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Rebase.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Rebase[NodeT, EGraphT]) => Boolean): Rebase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Rebase.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Rebase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Rebase.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Rebase[NodeT, EGraphT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Rebase.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Rebase[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/Rebase.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Rebase[NodeT, EGraphT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/Rebase.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, data: Unit, parallelize: ParallelMap): (Option[EGraphT], Unit)", "member" : "foresight.eqsat.saturation.Rebase.apply", "link" : "foresight\/eqsat\/saturation\/Rebase.html#apply(egraph:EGraphT,data:Unit,parallelize:foresight.eqsat.parallel.ParallelMap):(Option[EGraphT],Unit)", "kind" : "def"}, {"label" : "initialData", "tail" : "(): Unit", "member" : "foresight.eqsat.saturation.Rebase.initialData", "link" : "foresight\/eqsat\/saturation\/Rebase.html#initialData:Unit", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.Rebase#<init>", "error" : "unsupported entity"}, {"label" : "setRoot", "tail" : ": (EGraphT, EClassCall) => EGraphT", "member" : "foresight.eqsat.saturation.Rebase.setRoot", "link" : "foresight\/eqsat\/saturation\/Rebase.html#setRoot:(EGraphT,foresight.eqsat.EClassCall)=>EGraphT", "kind" : "val"}, {"label" : "getRoot", "tail" : ": (EGraphT) => EClassCall", "member" : "foresight.eqsat.saturation.Rebase.getRoot", "link" : "foresight\/eqsat\/saturation\/Rebase.html#getRoot:EGraphT=>foresight.eqsat.EClassCall", "kind" : "val"}, {"label" : "extractor", "tail" : ": Extractor[NodeT, EGraphT]", "member" : "foresight.eqsat.saturation.Rebase.extractor", "link" : "foresight\/eqsat\/saturation\/Rebase.html#extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/Rebase.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withChangeLogger", "tail" : "(logChange: (EGraphT, EGraphT) => Unit): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.withChangeLogger", "link" : "foresight\/eqsat\/saturation\/Rebase.html#withChangeLogger(logChange:(EGraphT,EGraphT)=>Unit):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "withRoot", "tail" : "(): Strategy[EGraphWithRoot[_, EGraphT], Unit]", "member" : "foresight.eqsat.saturation.Strategy.withRoot", "link" : "foresight\/eqsat\/saturation\/Rebase.html#withRoot:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[_,EGraphT],Data]", "kind" : "final def"}, {"label" : "dropData", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.dropData", "link" : "foresight\/eqsat\/saturation\/Rebase.html#dropData:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Option[Duration]): Strategy[EGraphT, (Unit, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/Rebase.html#withTimeout(timeout:Option[scala.concurrent.duration.Duration]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Duration): Strategy[EGraphT, (Unit, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/Rebase.html#withTimeout(timeout:scala.concurrent.duration.Duration):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Option[Int]): Strategy[EGraphT, (Unit, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/Rebase.html#withIterationLimit(limit:Option[Int]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Int): Strategy[EGraphT, (Unit, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/Rebase.html#withIterationLimit(limit:Int):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "repeatUntilStable", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStable", "link" : "foresight\/eqsat\/saturation\/Rebase.html#repeatUntilStable:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "repeatUntilStableWithState", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStableWithState", "link" : "foresight\/eqsat\/saturation\/Rebase.html#repeatUntilStableWithState:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "thenApply", "tail" : "(other: Strategy[EGraphT, Data2]): Strategy[EGraphT, (Unit, Data2)]", "member" : "foresight.eqsat.saturation.Strategy.thenApply", "link" : "foresight\/eqsat\/saturation\/Rebase.html#thenApply[Data2](other:foresight.eqsat.saturation.Strategy[EGraphT,Data2]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Data2)]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.saturation.Strategy.apply", "link" : "foresight\/eqsat\/saturation\/Rebase.html#apply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/Rebase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/Rebase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/Rebase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/Rebase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/Rebase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/Rebase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/Rebase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Rebase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Rebase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Rebase.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/Rebase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/Rebase.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/Rebase.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/Rebase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/Rebase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/Rebase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/Rebase.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.RuleStats", "shortDescription" : "Statistics for a rule in the backoff strategy.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RuleStats[NodeT, RuleT, MatchT]) => Boolean, msg: => Any): RuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RuleStats[NodeT, RuleT, MatchT]) => Boolean): RuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): RuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RuleStats[NodeT, RuleT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RuleStats[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RuleStats[NodeT, RuleT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.RuleStats#<init>", "error" : "unsupported entity"}, {"label" : "remainingMatches", "tail" : ": Int", "member" : "foresight.eqsat.saturation.RuleStats.remainingMatches", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#remainingMatches:Int", "kind" : "val"}, {"label" : "bannedUntil", "tail" : ": Option[Int]", "member" : "foresight.eqsat.saturation.RuleStats.bannedUntil", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#bannedUntil:Option[Int]", "kind" : "val"}, {"label" : "banLength", "tail" : ": Int", "member" : "foresight.eqsat.saturation.RuleStats.banLength", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#banLength:Int", "kind" : "val"}, {"label" : "matchLimit", "tail" : ": Int", "member" : "foresight.eqsat.saturation.RuleStats.matchLimit", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#matchLimit:Int", "kind" : "val"}, {"label" : "rule", "tail" : ": RuleT", "member" : "foresight.eqsat.saturation.RuleStats.rule", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#rule:RuleT", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/RuleStats.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/RuleStats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/RuleStats.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.SearchAndApply", "object" : "foresight\/eqsat\/saturation\/SearchAndApply$.html", "members_object" : [{"label" : "withCaching", "tail" : "(): SearchAndApply[Rule[NodeT, MatchT, EGraphT], EGraphWithRecordedApplications[NodeT, EGraphT, MatchT], MatchT]", "member" : "foresight.eqsat.saturation.SearchAndApply.withCaching", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#withCaching[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT<:foresight.eqsat.rewriting.PortableMatch[NodeT,MatchT]]:foresight.eqsat.saturation.SearchAndApply[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,EGraphT,MatchT],MatchT]", "kind" : "def"}, {"label" : "withoutCaching", "tail" : "(): SearchAndApply[Rule[NodeT, MatchT, EGraphT], EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.SearchAndApply.withoutCaching", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#withoutCaching[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT]:foresight.eqsat.saturation.SearchAndApply[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],EGraphT,MatchT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/SearchAndApply$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/saturation\/SearchAndApply.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SearchAndApply[RuleT, EGraphT, MatchT]) => Boolean, msg: => Any): SearchAndApply[RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SearchAndApply[RuleT, EGraphT, MatchT]) => Boolean): SearchAndApply[RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): SearchAndApply[RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SearchAndApply[RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SearchAndApply[RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SearchAndApply[RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(rules: Seq[RuleT], matches: Map[String, Seq[MatchT]], egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.saturation.SearchAndApply.apply", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#apply(rules:Seq[RuleT],matches:Map[String,Seq[MatchT]],egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "abstract def"}, {"label" : "search", "tail" : "(rules: Seq[RuleT], egraph: EGraphT, parallelize: ParallelMap): Map[String, Seq[MatchT]]", "member" : "foresight.eqsat.saturation.SearchAndApply.search", "link" : "foresight\/eqsat\/saturation\/SearchAndApply.html#search(rules:Seq[RuleT],egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Map[String,Seq[MatchT]]", "kind" : "abstract def"}], "shortDescription" : "A strategy that searches for matches of a set of rules in an e-graph and applies them."}, {"name" : "foresight.eqsat.saturation.StochasticRuleApplication", "shortDescription" : "A strategy that applies a sequence of rules in a stochastic manner.", "object" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html", "members_object" : [{"label" : "apply", "tail" : "(rules: Seq[Rule[NodeT, MatchT, EGraphT]], priorities: MatchPriorities[NodeT, Rule[NodeT, MatchT, EGraphT], MatchT]): StochasticRuleApplication[NodeT, Rule[NodeT, MatchT, EGraphT], EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.apply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT](rules:Seq[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT]],priorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],MatchT]):foresight.eqsat.saturation.StochasticRuleApplication[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],EGraphT,MatchT]", "kind" : "def"}, {"label" : "apply", "tail" : "(rules: Seq[Rule[NodeT, MatchT, EGraphT]], priorities: MatchPriorities[NodeT, Rule[NodeT, MatchT, EGraphT], MatchT], random: Random): StochasticRuleApplication[NodeT, Rule[NodeT, MatchT, EGraphT], EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.apply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT](rules:Seq[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT]],priorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],MatchT],random:foresight.util.random.Random):foresight.eqsat.saturation.StochasticRuleApplication[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],EGraphT,MatchT]", "kind" : "def"}, {"label" : "apply", "tail" : "(rules: Seq[RuleT], searchAndApply: SearchAndApply[RuleT, EGraphT, MatchT], priorities: MatchPriorities[NodeT, RuleT, MatchT]): StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.apply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#apply[NodeT,RuleT<:foresight.eqsat.rewriting.Rule[NodeT,MatchT,_],EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT](rules:Seq[RuleT],searchAndApply:foresight.eqsat.saturation.SearchAndApply[RuleT,EGraphT,MatchT],priorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,RuleT,MatchT]):foresight.eqsat.saturation.StochasticRuleApplication[NodeT,RuleT,EGraphT,MatchT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], (Random, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordingMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], (Random, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphT], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRoot[NodeT, EGraphT], (Random, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "closeRoot", "tail" : "(findRoot: (EGraphT) => EClassCall): Strategy[EGraphT, Random]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.closeRoot", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#closeRoot(findRoot:EGraphT=>foresight.eqsat.EClassCall):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeRecording", "tail" : "(): Strategy[EGraphT, Random]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordedApplications.closeRecording", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#closeRecording:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeMetadata", "tail" : "(): Strategy[EGraphT, Random]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.closeMetadata", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#closeMetadata:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "addAnalyses", "tail" : "(analyses: Analysis[NodeT, _]*): Strategy[EGraphWithMetadata[NodeT, EGraphT], (Random, Boolean)]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.addAnalyses", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#addAnalyses(analyses:foresight.eqsat.metadata.Analysis[NodeT,_]*):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT],(Data,Boolean)]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT]) => Boolean, msg: => Any): StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT]) => Boolean): StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StochasticRuleApplication[NodeT, RuleT, EGraphT, MatchT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, data: Random, parallelize: ParallelMap): (Option[EGraphT], Random)", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.apply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#apply(egraph:EGraphT,data:foresight.util.random.Random,parallelize:foresight.eqsat.parallel.ParallelMap):(Option[EGraphT],foresight.util.random.Random)", "kind" : "def"}, {"label" : "initialData", "tail" : "(): Random", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.initialData", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#initialData:foresight.util.random.Random", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.StochasticRuleApplication#<init>", "error" : "unsupported entity"}, {"label" : "random", "tail" : ": Random", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.random", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#random:foresight.util.random.Random", "kind" : "val"}, {"label" : "priorities", "tail" : ": MatchPriorities[NodeT, RuleT, MatchT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.priorities", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#priorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,RuleT,MatchT]", "kind" : "val"}, {"label" : "searchAndApply", "tail" : ": SearchAndApply[RuleT, EGraphT, MatchT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.searchAndApply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#searchAndApply:foresight.eqsat.saturation.SearchAndApply[RuleT,EGraphT,MatchT]", "kind" : "val"}, {"label" : "rules", "tail" : ": Seq[RuleT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplication.rules", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#rules:Seq[RuleT]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withChangeLogger", "tail" : "(logChange: (EGraphT, EGraphT) => Unit): Strategy[EGraphT, Random]", "member" : "foresight.eqsat.saturation.Strategy.withChangeLogger", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#withChangeLogger(logChange:(EGraphT,EGraphT)=>Unit):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "withRoot", "tail" : "(): Strategy[EGraphWithRoot[_, EGraphT], Random]", "member" : "foresight.eqsat.saturation.Strategy.withRoot", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#withRoot:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[_,EGraphT],Data]", "kind" : "final def"}, {"label" : "dropData", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.dropData", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#dropData:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Option[Duration]): Strategy[EGraphT, (Random, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#withTimeout(timeout:Option[scala.concurrent.duration.Duration]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Duration): Strategy[EGraphT, (Random, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#withTimeout(timeout:scala.concurrent.duration.Duration):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Option[Int]): Strategy[EGraphT, (Random, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#withIterationLimit(limit:Option[Int]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Int): Strategy[EGraphT, (Random, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#withIterationLimit(limit:Int):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "repeatUntilStable", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStable", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#repeatUntilStable:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "repeatUntilStableWithState", "tail" : "(): Strategy[EGraphT, Random]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStableWithState", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#repeatUntilStableWithState:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "thenApply", "tail" : "(other: Strategy[EGraphT, Data2]): Strategy[EGraphT, (Random, Data2)]", "member" : "foresight.eqsat.saturation.Strategy.thenApply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#thenApply[Data2](other:foresight.eqsat.saturation.Strategy[EGraphT,Data2]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Data2)]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.saturation.Strategy.apply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#apply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/StochasticRuleApplication.html", "kind" : "case class"}, {"name" : "foresight.eqsat.saturation.StochasticRuleApplicationWithCaching", "shortDescription" : "A strategy that applies a sequence of rules in a stochastic manner, caching the matches that have alreadybeen applied.", "object" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html", "members_object" : [{"label" : "apply", "tail" : "(rules: Seq[Rule[NodeT, MatchT, EGraphT]], priorities: MatchPriorities[NodeT, Rule[NodeT, MatchT, EGraphT], MatchT]): StochasticRuleApplication[NodeT, Rule[NodeT, MatchT, EGraphT], EGraphWithRecordedApplications[NodeT, EGraphT, MatchT], MatchT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplicationWithCaching.apply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT<:foresight.eqsat.rewriting.PortableMatch[NodeT,MatchT]](rules:Seq[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT]],priorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],MatchT]):foresight.eqsat.saturation.StochasticRuleApplication[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,EGraphT,MatchT],MatchT]", "kind" : "def"}, {"label" : "apply", "tail" : "(rules: Seq[Rule[NodeT, MatchT, EGraphT]], priorities: MatchPriorities[NodeT, Rule[NodeT, MatchT, EGraphT], MatchT], random: Random): StochasticRuleApplication[NodeT, Rule[NodeT, MatchT, EGraphT], EGraphWithRecordedApplications[NodeT, EGraphT, MatchT], MatchT]", "member" : "foresight.eqsat.saturation.StochasticRuleApplicationWithCaching.apply", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],MatchT<:foresight.eqsat.rewriting.PortableMatch[NodeT,MatchT]](rules:Seq[foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT]],priorities:foresight.eqsat.saturation.priorities.MatchPriorities[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],MatchT],random:foresight.util.random.Random):foresight.eqsat.saturation.StochasticRuleApplication[NodeT,foresight.eqsat.rewriting.Rule[NodeT,MatchT,EGraphT],foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,EGraphT,MatchT],MatchT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/StochasticRuleApplicationWithCaching$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "foresight.eqsat.saturation.Strategy", "object" : "foresight\/eqsat\/saturation\/Strategy$.html", "members_object" : [{"label" : "WithRecordingMetadataAndRoot", "tail" : "", "member" : "foresight.eqsat.saturation.Strategy.WithRecordingMetadataAndRoot", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#WithRecordingMetadataAndRoot[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Match<:foresight.eqsat.rewriting.PortableMatch[NodeT,Match],Data]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "WithMetadataAndRoot", "tail" : "", "member" : "foresight.eqsat.saturation.Strategy.WithMetadataAndRoot", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#WithMetadataAndRoot[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Data]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "WithRoot", "tail" : "", "member" : "foresight.eqsat.saturation.Strategy.WithRoot", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#WithRoot[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Data]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "WithRecordedApplications", "tail" : "", "member" : "foresight.eqsat.saturation.Strategy.WithRecordedApplications", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#WithRecordedApplications[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Match<:foresight.eqsat.rewriting.PortableMatch[NodeT,Match],Data]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "WithMetadata", "tail" : "", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#WithMetadata[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Data]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/Strategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/Strategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "foresight\/eqsat\/saturation\/Strategy.html", "kind" : "trait", "members_trait" : [{"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordingMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/Strategy.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/Strategy.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphT], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRoot[NodeT, EGraphT], (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/Strategy.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "closeRoot", "tail" : "(findRoot: (EGraphT) => EClassCall): Strategy[EGraphT, Data]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.closeRoot", "link" : "foresight\/eqsat\/saturation\/Strategy.html#closeRoot(findRoot:EGraphT=>foresight.eqsat.EClassCall):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeRecording", "tail" : "(): Strategy[EGraphT, Data]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordedApplications.closeRecording", "link" : "foresight\/eqsat\/saturation\/Strategy.html#closeRecording:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeMetadata", "tail" : "(): Strategy[EGraphT, Data]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.closeMetadata", "link" : "foresight\/eqsat\/saturation\/Strategy.html#closeMetadata:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "addAnalyses", "tail" : "(analyses: Analysis[NodeT, _]*): Strategy[EGraphWithMetadata[NodeT, EGraphT], (Data, Boolean)]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.addAnalyses", "link" : "foresight\/eqsat\/saturation\/Strategy.html#addAnalyses(analyses:foresight.eqsat.metadata.Analysis[NodeT,_]*):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT],(Data,Boolean)]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/Strategy.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/Strategy.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Strategy[EGraphT, Data]) => Boolean, msg: => Any): Strategy[EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Strategy.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Strategy[EGraphT, Data]) => Boolean): Strategy[EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Strategy.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Strategy[EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Strategy.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Strategy[EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/Strategy.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Strategy[EGraphT, Data], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/Strategy.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Strategy[EGraphT, Data], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/Strategy.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withChangeLogger", "tail" : "(logChange: (EGraphT, EGraphT) => Unit): Strategy[EGraphT, Data]", "member" : "foresight.eqsat.saturation.Strategy.withChangeLogger", "link" : "foresight\/eqsat\/saturation\/Strategy.html#withChangeLogger(logChange:(EGraphT,EGraphT)=>Unit):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "withRoot", "tail" : "(): Strategy[EGraphWithRoot[_, EGraphT], Data]", "member" : "foresight.eqsat.saturation.Strategy.withRoot", "link" : "foresight\/eqsat\/saturation\/Strategy.html#withRoot:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[_,EGraphT],Data]", "kind" : "final def"}, {"label" : "dropData", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.dropData", "link" : "foresight\/eqsat\/saturation\/Strategy.html#dropData:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Option[Duration]): Strategy[EGraphT, (Data, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/Strategy.html#withTimeout(timeout:Option[scala.concurrent.duration.Duration]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Duration): Strategy[EGraphT, (Data, Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/Strategy.html#withTimeout(timeout:scala.concurrent.duration.Duration):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Option[Int]): Strategy[EGraphT, (Data, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/Strategy.html#withIterationLimit(limit:Option[Int]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Int): Strategy[EGraphT, (Data, Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/Strategy.html#withIterationLimit(limit:Int):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "repeatUntilStable", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStable", "link" : "foresight\/eqsat\/saturation\/Strategy.html#repeatUntilStable:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "repeatUntilStableWithState", "tail" : "(): Strategy[EGraphT, Data]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStableWithState", "link" : "foresight\/eqsat\/saturation\/Strategy.html#repeatUntilStableWithState:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "thenApply", "tail" : "(other: Strategy[EGraphT, Data2]): Strategy[EGraphT, (Data, Data2)]", "member" : "foresight.eqsat.saturation.Strategy.thenApply", "link" : "foresight\/eqsat\/saturation\/Strategy.html#thenApply[Data2](other:foresight.eqsat.saturation.Strategy[EGraphT,Data2]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Data2)]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.saturation.Strategy.apply", "link" : "foresight\/eqsat\/saturation\/Strategy.html#apply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/Strategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/Strategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/Strategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/Strategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/Strategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/Strategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/Strategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Strategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Strategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/Strategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/Strategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/Strategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/Strategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/Strategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/Strategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/Strategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/Strategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/Strategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/Strategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, data: Data, parallelize: ParallelMap): (Option[EGraphT], Data)", "member" : "foresight.eqsat.saturation.Strategy.apply", "link" : "foresight\/eqsat\/saturation\/Strategy.html#apply(egraph:EGraphT,data:Data,parallelize:foresight.eqsat.parallel.ParallelMap):(Option[EGraphT],Data)", "kind" : "abstract def"}, {"label" : "initialData", "tail" : "(): Data", "member" : "foresight.eqsat.saturation.Strategy.initialData", "link" : "foresight\/eqsat\/saturation\/Strategy.html#initialData:Data", "kind" : "abstract def"}], "shortDescription" : "A strategy for saturating an e-graph."}, {"name" : "foresight.eqsat.saturation.TransformAndRebase", "shortDescription" : "A strategy that first transforms the e-graph using a given strategy and then rebases the e-graph by extracting atree from the e-graph, subsequently adding that tree to a new e-graph.", "object" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html", "members_object" : [{"label" : "withRecording", "tail" : "(transform: Strategy[EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], Data], extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): TransformAndRebase[NodeT, EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], Data]", "member" : "foresight.eqsat.saturation.TransformAndRebase.withRecording", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#withRecording[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Match<:foresight.eqsat.rewriting.PortableMatch[NodeT,Match],Data](transform:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],Data],extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.TransformAndRebase[NodeT,foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],Data]", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(transform: Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Data], extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]]): TransformAndRebase[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Data]", "member" : "foresight.eqsat.saturation.TransformAndRebase.withMetadata", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#withMetadata[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Data](transform:foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Data],extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]]):foresight.eqsat.saturation.TransformAndRebase[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Data]", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(transform: Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Data], extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): TransformAndRebase[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Data]", "member" : "foresight.eqsat.saturation.TransformAndRebase.withMetadata", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#withMetadata[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Data](transform:foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Data],extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.TransformAndRebase[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Data]", "kind" : "def"}, {"label" : "apply", "tail" : "(transform: Strategy[EGraphWithRoot[NodeT, EGraphT], Data], extractor: Extractor[NodeT, EGraphT]): TransformAndRebase[NodeT, EGraphWithRoot[NodeT, EGraphT], Data]", "member" : "foresight.eqsat.saturation.TransformAndRebase.apply", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Data](transform:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],Data],extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT]):foresight.eqsat.saturation.TransformAndRebase[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],Data]", "kind" : "def"}, {"label" : "apply", "tail" : "(transform: Strategy[EGraphWithRoot[NodeT, EGraphT], Data], extractor: Extractor[NodeT, EGraphT], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): TransformAndRebase[NodeT, EGraphWithRoot[NodeT, EGraphT], Data]", "member" : "foresight.eqsat.saturation.TransformAndRebase.apply", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#apply[NodeT,EGraphT<:foresight.eqsat.EGraphLike[NodeT,EGraphT]withforesight.eqsat.EGraph[NodeT],Data](transform:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],Data],extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.TransformAndRebase[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],Data]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRecordedApplications[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], Match], ((Data, Option[Tree[NodeT]]), Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordingMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRecordedApplications[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],Match],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]]], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithMetadata[NodeT, EGraphWithRoot[NodeT, EGraphT]], ((Data, Option[Tree[NodeT]]), Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadataAndRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]]],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT]],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "thenRebase", "tail" : "(extractor: Extractor[NodeT, EGraphT], areEquivalent: (Tree[NodeT], Tree[NodeT]) => Boolean): Strategy[EGraphWithRoot[NodeT, EGraphT], ((Data, Option[Tree[NodeT]]), Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.thenRebase", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#thenRebase(extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT],areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean):foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[NodeT,EGraphT],(Data,Option[foresight.eqsat.Tree[NodeT]])]", "kind" : "def"}, {"label" : "closeRoot", "tail" : "(findRoot: (EGraphT) => EClassCall): Strategy[EGraphT, (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRoot.closeRoot", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#closeRoot(findRoot:EGraphT=>foresight.eqsat.EClassCall):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeRecording", "tail" : "(): Strategy[EGraphT, (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithRecordedApplications.closeRecording", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#closeRecording:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "closeMetadata", "tail" : "(): Strategy[EGraphT, (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.closeMetadata", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#closeMetadata:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "def"}, {"label" : "addAnalyses", "tail" : "(analyses: Analysis[NodeT, _]*): Strategy[EGraphWithMetadata[NodeT, EGraphT], ((Data, Option[Tree[NodeT]]), Boolean)]", "member" : "foresight.eqsat.saturation.Strategy.WithMetadata.addAnalyses", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#addAnalyses(analyses:foresight.eqsat.metadata.Analysis[NodeT,_]*):foresight.eqsat.saturation.Strategy[foresight.eqsat.metadata.EGraphWithMetadata[NodeT,EGraphT],(Data,Boolean)]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TransformAndRebase[NodeT, EGraphT, Data]) => Boolean, msg: => Any): TransformAndRebase[NodeT, EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TransformAndRebase[NodeT, EGraphT, Data]) => Boolean): TransformAndRebase[NodeT, EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): TransformAndRebase[NodeT, EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TransformAndRebase[NodeT, EGraphT, Data]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TransformAndRebase[NodeT, EGraphT, Data], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TransformAndRebase[NodeT, EGraphT, Data], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, data: (Data, Option[Tree[NodeT]]), parallelize: ParallelMap): (Option[EGraphT], (Data, Option[Tree[NodeT]]))", "member" : "foresight.eqsat.saturation.TransformAndRebase.apply", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#apply(egraph:EGraphT,data:(Data,Option[foresight.eqsat.Tree[NodeT]]),parallelize:foresight.eqsat.parallel.ParallelMap):(Option[EGraphT],(Data,Option[foresight.eqsat.Tree[NodeT]]))", "kind" : "def"}, {"label" : "initialData", "tail" : "(): (Data, Option[Tree[NodeT]])", "member" : "foresight.eqsat.saturation.TransformAndRebase.initialData", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#initialData:(Data,Option[foresight.eqsat.Tree[NodeT]])", "kind" : "def"}, {"member" : "foresight.eqsat.saturation.TransformAndRebase#<init>", "error" : "unsupported entity"}, {"label" : "areEquivalent", "tail" : ": (Tree[NodeT], Tree[NodeT]) => Boolean", "member" : "foresight.eqsat.saturation.TransformAndRebase.areEquivalent", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#areEquivalent:(foresight.eqsat.Tree[NodeT],foresight.eqsat.Tree[NodeT])=>Boolean", "kind" : "val"}, {"label" : "setRoot", "tail" : ": (EGraphT, EClassCall) => EGraphT", "member" : "foresight.eqsat.saturation.TransformAndRebase.setRoot", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#setRoot:(EGraphT,foresight.eqsat.EClassCall)=>EGraphT", "kind" : "val"}, {"label" : "getRoot", "tail" : ": (EGraphT) => EClassCall", "member" : "foresight.eqsat.saturation.TransformAndRebase.getRoot", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#getRoot:EGraphT=>foresight.eqsat.EClassCall", "kind" : "val"}, {"label" : "extractor", "tail" : ": Extractor[NodeT, EGraphT]", "member" : "foresight.eqsat.saturation.TransformAndRebase.extractor", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#extractor:foresight.eqsat.extraction.Extractor[NodeT,EGraphT]", "kind" : "val"}, {"label" : "transform", "tail" : ": Strategy[EGraphT, Data]", "member" : "foresight.eqsat.saturation.TransformAndRebase.transform", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#transform:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "withChangeLogger", "tail" : "(logChange: (EGraphT, EGraphT) => Unit): Strategy[EGraphT, (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.withChangeLogger", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#withChangeLogger(logChange:(EGraphT,EGraphT)=>Unit):foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "withRoot", "tail" : "(): Strategy[EGraphWithRoot[_, EGraphT], (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.withRoot", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#withRoot:foresight.eqsat.saturation.Strategy[foresight.eqsat.saturation.EGraphWithRoot[_,EGraphT],Data]", "kind" : "final def"}, {"label" : "dropData", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.dropData", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#dropData:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Option[Duration]): Strategy[EGraphT, ((Data, Option[Tree[NodeT]]), Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#withTimeout(timeout:Option[scala.concurrent.duration.Duration]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withTimeout", "tail" : "(timeout: Duration): Strategy[EGraphT, ((Data, Option[Tree[NodeT]]), Duration)]", "member" : "foresight.eqsat.saturation.Strategy.withTimeout", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#withTimeout(timeout:scala.concurrent.duration.Duration):foresight.eqsat.saturation.Strategy[EGraphT,(Data,scala.concurrent.duration.Duration)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Option[Int]): Strategy[EGraphT, ((Data, Option[Tree[NodeT]]), Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#withIterationLimit(limit:Option[Int]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "withIterationLimit", "tail" : "(limit: Int): Strategy[EGraphT, ((Data, Option[Tree[NodeT]]), Int)]", "member" : "foresight.eqsat.saturation.Strategy.withIterationLimit", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#withIterationLimit(limit:Int):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Int)]", "kind" : "final def"}, {"label" : "repeatUntilStable", "tail" : "(): Strategy[EGraphT, Unit]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStable", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#repeatUntilStable:foresight.eqsat.saturation.Strategy[EGraphT,Unit]", "kind" : "final def"}, {"label" : "repeatUntilStableWithState", "tail" : "(): Strategy[EGraphT, (Data, Option[Tree[NodeT]])]", "member" : "foresight.eqsat.saturation.Strategy.repeatUntilStableWithState", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#repeatUntilStableWithState:foresight.eqsat.saturation.Strategy[EGraphT,Data]", "kind" : "final def"}, {"label" : "thenApply", "tail" : "(other: Strategy[EGraphT, Data2]): Strategy[EGraphT, ((Data, Option[Tree[NodeT]]), Data2)]", "member" : "foresight.eqsat.saturation.Strategy.thenApply", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#thenApply[Data2](other:foresight.eqsat.saturation.Strategy[EGraphT,Data2]):foresight.eqsat.saturation.Strategy[EGraphT,(Data,Data2)]", "kind" : "final def"}, {"label" : "apply", "tail" : "(egraph: EGraphT, parallelize: ParallelMap): Option[EGraphT]", "member" : "foresight.eqsat.saturation.Strategy.apply", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#apply(egraph:EGraphT,parallelize:foresight.eqsat.parallel.ParallelMap):Option[EGraphT]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "foresight\/eqsat\/saturation\/TransformAndRebase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "foresight\/eqsat\/saturation\/TransformAndRebase.html", "kind" : "case class"}]};